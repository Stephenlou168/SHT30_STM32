
sht30_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000411c  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004258  08004258  00005258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e8  080042e8  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080042e8  080042e8  000052e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042f0  080042f0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f0  080042f0  000052f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042f4  080042f4  000052f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000068  08004360  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08004360  00006234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000654f  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014fd  00000000  00000000  0000c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ae  00000000  00000000  0000e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016038  00000000  00000000  0000e806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a31c  00000000  00000000  0002483e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086126  00000000  00000000  0002eb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4c80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e8  00000000  00000000  000b4cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b73ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	08004240 	.word	0x08004240

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	08004240 	.word	0x08004240

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	@ 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_frsub>:
 80004f4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__addsf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_fsub>:
 80004fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000500 <__addsf3>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	bf1f      	itttt	ne
 8000504:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000508:	ea92 0f03 	teqne	r2, r3
 800050c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000510:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000514:	d06a      	beq.n	80005ec <__addsf3+0xec>
 8000516:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800051a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800051e:	bfc1      	itttt	gt
 8000520:	18d2      	addgt	r2, r2, r3
 8000522:	4041      	eorgt	r1, r0
 8000524:	4048      	eorgt	r0, r1
 8000526:	4041      	eorgt	r1, r0
 8000528:	bfb8      	it	lt
 800052a:	425b      	neglt	r3, r3
 800052c:	2b19      	cmp	r3, #25
 800052e:	bf88      	it	hi
 8000530:	4770      	bxhi	lr
 8000532:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000536:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800053a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800053e:	bf18      	it	ne
 8000540:	4240      	negne	r0, r0
 8000542:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000546:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800054a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800054e:	bf18      	it	ne
 8000550:	4249      	negne	r1, r1
 8000552:	ea92 0f03 	teq	r2, r3
 8000556:	d03f      	beq.n	80005d8 <__addsf3+0xd8>
 8000558:	f1a2 0201 	sub.w	r2, r2, #1
 800055c:	fa41 fc03 	asr.w	ip, r1, r3
 8000560:	eb10 000c 	adds.w	r0, r0, ip
 8000564:	f1c3 0320 	rsb	r3, r3, #32
 8000568:	fa01 f103 	lsl.w	r1, r1, r3
 800056c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000570:	d502      	bpl.n	8000578 <__addsf3+0x78>
 8000572:	4249      	negs	r1, r1
 8000574:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000578:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800057c:	d313      	bcc.n	80005a6 <__addsf3+0xa6>
 800057e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000582:	d306      	bcc.n	8000592 <__addsf3+0x92>
 8000584:	0840      	lsrs	r0, r0, #1
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	f102 0201 	add.w	r2, r2, #1
 800058e:	2afe      	cmp	r2, #254	@ 0xfe
 8000590:	d251      	bcs.n	8000636 <__addsf3+0x136>
 8000592:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000596:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800059a:	bf08      	it	eq
 800059c:	f020 0001 	biceq.w	r0, r0, #1
 80005a0:	ea40 0003 	orr.w	r0, r0, r3
 80005a4:	4770      	bx	lr
 80005a6:	0049      	lsls	r1, r1, #1
 80005a8:	eb40 0000 	adc.w	r0, r0, r0
 80005ac:	3a01      	subs	r2, #1
 80005ae:	bf28      	it	cs
 80005b0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80005b4:	d2ed      	bcs.n	8000592 <__addsf3+0x92>
 80005b6:	fab0 fc80 	clz	ip, r0
 80005ba:	f1ac 0c08 	sub.w	ip, ip, #8
 80005be:	ebb2 020c 	subs.w	r2, r2, ip
 80005c2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005c6:	bfaa      	itet	ge
 80005c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005cc:	4252      	neglt	r2, r2
 80005ce:	4318      	orrge	r0, r3
 80005d0:	bfbc      	itt	lt
 80005d2:	40d0      	lsrlt	r0, r2
 80005d4:	4318      	orrlt	r0, r3
 80005d6:	4770      	bx	lr
 80005d8:	f092 0f00 	teq	r2, #0
 80005dc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005e0:	bf06      	itte	eq
 80005e2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005e6:	3201      	addeq	r2, #1
 80005e8:	3b01      	subne	r3, #1
 80005ea:	e7b5      	b.n	8000558 <__addsf3+0x58>
 80005ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005f4:	bf18      	it	ne
 80005f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005fa:	d021      	beq.n	8000640 <__addsf3+0x140>
 80005fc:	ea92 0f03 	teq	r2, r3
 8000600:	d004      	beq.n	800060c <__addsf3+0x10c>
 8000602:	f092 0f00 	teq	r2, #0
 8000606:	bf08      	it	eq
 8000608:	4608      	moveq	r0, r1
 800060a:	4770      	bx	lr
 800060c:	ea90 0f01 	teq	r0, r1
 8000610:	bf1c      	itt	ne
 8000612:	2000      	movne	r0, #0
 8000614:	4770      	bxne	lr
 8000616:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800061a:	d104      	bne.n	8000626 <__addsf3+0x126>
 800061c:	0040      	lsls	r0, r0, #1
 800061e:	bf28      	it	cs
 8000620:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000624:	4770      	bx	lr
 8000626:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800062a:	bf3c      	itt	cc
 800062c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000630:	4770      	bxcc	lr
 8000632:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000636:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800063a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800063e:	4770      	bx	lr
 8000640:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000644:	bf16      	itet	ne
 8000646:	4608      	movne	r0, r1
 8000648:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800064c:	4601      	movne	r1, r0
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	bf06      	itte	eq
 8000652:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000656:	ea90 0f01 	teqeq	r0, r1
 800065a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800065e:	4770      	bx	lr

08000660 <__aeabi_ui2f>:
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	e004      	b.n	8000670 <__aeabi_i2f+0x8>
 8000666:	bf00      	nop

08000668 <__aeabi_i2f>:
 8000668:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	ea5f 0c00 	movs.w	ip, r0
 8000674:	bf08      	it	eq
 8000676:	4770      	bxeq	lr
 8000678:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800067c:	4601      	mov	r1, r0
 800067e:	f04f 0000 	mov.w	r0, #0
 8000682:	e01c      	b.n	80006be <__aeabi_l2f+0x2a>

08000684 <__aeabi_ul2f>:
 8000684:	ea50 0201 	orrs.w	r2, r0, r1
 8000688:	bf08      	it	eq
 800068a:	4770      	bxeq	lr
 800068c:	f04f 0300 	mov.w	r3, #0
 8000690:	e00a      	b.n	80006a8 <__aeabi_l2f+0x14>
 8000692:	bf00      	nop

08000694 <__aeabi_l2f>:
 8000694:	ea50 0201 	orrs.w	r2, r0, r1
 8000698:	bf08      	it	eq
 800069a:	4770      	bxeq	lr
 800069c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80006a0:	d502      	bpl.n	80006a8 <__aeabi_l2f+0x14>
 80006a2:	4240      	negs	r0, r0
 80006a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a8:	ea5f 0c01 	movs.w	ip, r1
 80006ac:	bf02      	ittt	eq
 80006ae:	4684      	moveq	ip, r0
 80006b0:	4601      	moveq	r1, r0
 80006b2:	2000      	moveq	r0, #0
 80006b4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80006b8:	bf08      	it	eq
 80006ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80006be:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006c2:	fabc f28c 	clz	r2, ip
 80006c6:	3a08      	subs	r2, #8
 80006c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006cc:	db10      	blt.n	80006f0 <__aeabi_l2f+0x5c>
 80006ce:	fa01 fc02 	lsl.w	ip, r1, r2
 80006d2:	4463      	add	r3, ip
 80006d4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006d8:	f1c2 0220 	rsb	r2, r2, #32
 80006dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006e0:	fa20 f202 	lsr.w	r2, r0, r2
 80006e4:	eb43 0002 	adc.w	r0, r3, r2
 80006e8:	bf08      	it	eq
 80006ea:	f020 0001 	biceq.w	r0, r0, #1
 80006ee:	4770      	bx	lr
 80006f0:	f102 0220 	add.w	r2, r2, #32
 80006f4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006f8:	f1c2 0220 	rsb	r2, r2, #32
 80006fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000700:	fa21 f202 	lsr.w	r2, r1, r2
 8000704:	eb43 0002 	adc.w	r0, r3, r2
 8000708:	bf08      	it	eq
 800070a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800070e:	4770      	bx	lr

08000710 <__aeabi_fmul>:
 8000710:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000714:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000718:	bf1e      	ittt	ne
 800071a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800071e:	ea92 0f0c 	teqne	r2, ip
 8000722:	ea93 0f0c 	teqne	r3, ip
 8000726:	d06f      	beq.n	8000808 <__aeabi_fmul+0xf8>
 8000728:	441a      	add	r2, r3
 800072a:	ea80 0c01 	eor.w	ip, r0, r1
 800072e:	0240      	lsls	r0, r0, #9
 8000730:	bf18      	it	ne
 8000732:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000736:	d01e      	beq.n	8000776 <__aeabi_fmul+0x66>
 8000738:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800073c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000740:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000744:	fba0 3101 	umull	r3, r1, r0, r1
 8000748:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800074c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000750:	bf3e      	ittt	cc
 8000752:	0049      	lslcc	r1, r1, #1
 8000754:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000758:	005b      	lslcc	r3, r3, #1
 800075a:	ea40 0001 	orr.w	r0, r0, r1
 800075e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000762:	2afd      	cmp	r2, #253	@ 0xfd
 8000764:	d81d      	bhi.n	80007a2 <__aeabi_fmul+0x92>
 8000766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800076a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800076e:	bf08      	it	eq
 8000770:	f020 0001 	biceq.w	r0, r0, #1
 8000774:	4770      	bx	lr
 8000776:	f090 0f00 	teq	r0, #0
 800077a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800077e:	bf08      	it	eq
 8000780:	0249      	lsleq	r1, r1, #9
 8000782:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000786:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800078a:	3a7f      	subs	r2, #127	@ 0x7f
 800078c:	bfc2      	ittt	gt
 800078e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000792:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000796:	4770      	bxgt	lr
 8000798:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800079c:	f04f 0300 	mov.w	r3, #0
 80007a0:	3a01      	subs	r2, #1
 80007a2:	dc5d      	bgt.n	8000860 <__aeabi_fmul+0x150>
 80007a4:	f112 0f19 	cmn.w	r2, #25
 80007a8:	bfdc      	itt	le
 80007aa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80007ae:	4770      	bxle	lr
 80007b0:	f1c2 0200 	rsb	r2, r2, #0
 80007b4:	0041      	lsls	r1, r0, #1
 80007b6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ba:	f1c2 0220 	rsb	r2, r2, #32
 80007be:	fa00 fc02 	lsl.w	ip, r0, r2
 80007c2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007c6:	f140 0000 	adc.w	r0, r0, #0
 80007ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007ce:	bf08      	it	eq
 80007d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007d4:	4770      	bx	lr
 80007d6:	f092 0f00 	teq	r2, #0
 80007da:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007de:	bf02      	ittt	eq
 80007e0:	0040      	lsleq	r0, r0, #1
 80007e2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007e6:	3a01      	subeq	r2, #1
 80007e8:	d0f9      	beq.n	80007de <__aeabi_fmul+0xce>
 80007ea:	ea40 000c 	orr.w	r0, r0, ip
 80007ee:	f093 0f00 	teq	r3, #0
 80007f2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007f6:	bf02      	ittt	eq
 80007f8:	0049      	lsleq	r1, r1, #1
 80007fa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007fe:	3b01      	subeq	r3, #1
 8000800:	d0f9      	beq.n	80007f6 <__aeabi_fmul+0xe6>
 8000802:	ea41 010c 	orr.w	r1, r1, ip
 8000806:	e78f      	b.n	8000728 <__aeabi_fmul+0x18>
 8000808:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800080c:	ea92 0f0c 	teq	r2, ip
 8000810:	bf18      	it	ne
 8000812:	ea93 0f0c 	teqne	r3, ip
 8000816:	d00a      	beq.n	800082e <__aeabi_fmul+0x11e>
 8000818:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800081c:	bf18      	it	ne
 800081e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000822:	d1d8      	bne.n	80007d6 <__aeabi_fmul+0xc6>
 8000824:	ea80 0001 	eor.w	r0, r0, r1
 8000828:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800082c:	4770      	bx	lr
 800082e:	f090 0f00 	teq	r0, #0
 8000832:	bf17      	itett	ne
 8000834:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000838:	4608      	moveq	r0, r1
 800083a:	f091 0f00 	teqne	r1, #0
 800083e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000842:	d014      	beq.n	800086e <__aeabi_fmul+0x15e>
 8000844:	ea92 0f0c 	teq	r2, ip
 8000848:	d101      	bne.n	800084e <__aeabi_fmul+0x13e>
 800084a:	0242      	lsls	r2, r0, #9
 800084c:	d10f      	bne.n	800086e <__aeabi_fmul+0x15e>
 800084e:	ea93 0f0c 	teq	r3, ip
 8000852:	d103      	bne.n	800085c <__aeabi_fmul+0x14c>
 8000854:	024b      	lsls	r3, r1, #9
 8000856:	bf18      	it	ne
 8000858:	4608      	movne	r0, r1
 800085a:	d108      	bne.n	800086e <__aeabi_fmul+0x15e>
 800085c:	ea80 0001 	eor.w	r0, r0, r1
 8000860:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000864:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000868:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800086c:	4770      	bx	lr
 800086e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000872:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000876:	4770      	bx	lr

08000878 <__aeabi_fdiv>:
 8000878:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000880:	bf1e      	ittt	ne
 8000882:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000886:	ea92 0f0c 	teqne	r2, ip
 800088a:	ea93 0f0c 	teqne	r3, ip
 800088e:	d069      	beq.n	8000964 <__aeabi_fdiv+0xec>
 8000890:	eba2 0203 	sub.w	r2, r2, r3
 8000894:	ea80 0c01 	eor.w	ip, r0, r1
 8000898:	0249      	lsls	r1, r1, #9
 800089a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800089e:	d037      	beq.n	8000910 <__aeabi_fdiv+0x98>
 80008a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008a4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80008a8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008ac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b0:	428b      	cmp	r3, r1
 80008b2:	bf38      	it	cc
 80008b4:	005b      	lslcc	r3, r3, #1
 80008b6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80008ba:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80008be:	428b      	cmp	r3, r1
 80008c0:	bf24      	itt	cs
 80008c2:	1a5b      	subcs	r3, r3, r1
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008cc:	bf24      	itt	cs
 80008ce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008d2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008d6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008da:	bf24      	itt	cs
 80008dc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008e8:	bf24      	itt	cs
 80008ea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008ee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	bf18      	it	ne
 80008f6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008fa:	d1e0      	bne.n	80008be <__aeabi_fdiv+0x46>
 80008fc:	2afd      	cmp	r2, #253	@ 0xfd
 80008fe:	f63f af50 	bhi.w	80007a2 <__aeabi_fmul+0x92>
 8000902:	428b      	cmp	r3, r1
 8000904:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000908:	bf08      	it	eq
 800090a:	f020 0001 	biceq.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000914:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000918:	327f      	adds	r2, #127	@ 0x7f
 800091a:	bfc2      	ittt	gt
 800091c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000920:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000924:	4770      	bxgt	lr
 8000926:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	3a01      	subs	r2, #1
 8000930:	e737      	b.n	80007a2 <__aeabi_fmul+0x92>
 8000932:	f092 0f00 	teq	r2, #0
 8000936:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800093a:	bf02      	ittt	eq
 800093c:	0040      	lsleq	r0, r0, #1
 800093e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000942:	3a01      	subeq	r2, #1
 8000944:	d0f9      	beq.n	800093a <__aeabi_fdiv+0xc2>
 8000946:	ea40 000c 	orr.w	r0, r0, ip
 800094a:	f093 0f00 	teq	r3, #0
 800094e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0049      	lsleq	r1, r1, #1
 8000956:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800095a:	3b01      	subeq	r3, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fdiv+0xda>
 800095e:	ea41 010c 	orr.w	r1, r1, ip
 8000962:	e795      	b.n	8000890 <__aeabi_fdiv+0x18>
 8000964:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000968:	ea92 0f0c 	teq	r2, ip
 800096c:	d108      	bne.n	8000980 <__aeabi_fdiv+0x108>
 800096e:	0242      	lsls	r2, r0, #9
 8000970:	f47f af7d 	bne.w	800086e <__aeabi_fmul+0x15e>
 8000974:	ea93 0f0c 	teq	r3, ip
 8000978:	f47f af70 	bne.w	800085c <__aeabi_fmul+0x14c>
 800097c:	4608      	mov	r0, r1
 800097e:	e776      	b.n	800086e <__aeabi_fmul+0x15e>
 8000980:	ea93 0f0c 	teq	r3, ip
 8000984:	d104      	bne.n	8000990 <__aeabi_fdiv+0x118>
 8000986:	024b      	lsls	r3, r1, #9
 8000988:	f43f af4c 	beq.w	8000824 <__aeabi_fmul+0x114>
 800098c:	4608      	mov	r0, r1
 800098e:	e76e      	b.n	800086e <__aeabi_fmul+0x15e>
 8000990:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000994:	bf18      	it	ne
 8000996:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800099a:	d1ca      	bne.n	8000932 <__aeabi_fdiv+0xba>
 800099c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80009a0:	f47f af5c 	bne.w	800085c <__aeabi_fmul+0x14c>
 80009a4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80009a8:	f47f af3c 	bne.w	8000824 <__aeabi_fmul+0x114>
 80009ac:	e75f      	b.n	800086e <__aeabi_fmul+0x15e>
 80009ae:	bf00      	nop

080009b0 <__aeabi_uldivmod>:
 80009b0:	b953      	cbnz	r3, 80009c8 <__aeabi_uldivmod+0x18>
 80009b2:	b94a      	cbnz	r2, 80009c8 <__aeabi_uldivmod+0x18>
 80009b4:	2900      	cmp	r1, #0
 80009b6:	bf08      	it	eq
 80009b8:	2800      	cmpeq	r0, #0
 80009ba:	bf1c      	itt	ne
 80009bc:	f04f 31ff 	movne.w	r1, #4294967295
 80009c0:	f04f 30ff 	movne.w	r0, #4294967295
 80009c4:	f000 b968 	b.w	8000c98 <__aeabi_idiv0>
 80009c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d0:	f000 f806 	bl	80009e0 <__udivmoddi4>
 80009d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009dc:	b004      	add	sp, #16
 80009de:	4770      	bx	lr

080009e0 <__udivmoddi4>:
 80009e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e4:	9d08      	ldr	r5, [sp, #32]
 80009e6:	460c      	mov	r4, r1
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d14e      	bne.n	8000a8a <__udivmoddi4+0xaa>
 80009ec:	4694      	mov	ip, r2
 80009ee:	458c      	cmp	ip, r1
 80009f0:	4686      	mov	lr, r0
 80009f2:	fab2 f282 	clz	r2, r2
 80009f6:	d962      	bls.n	8000abe <__udivmoddi4+0xde>
 80009f8:	b14a      	cbz	r2, 8000a0e <__udivmoddi4+0x2e>
 80009fa:	f1c2 0320 	rsb	r3, r2, #32
 80009fe:	4091      	lsls	r1, r2
 8000a00:	fa20 f303 	lsr.w	r3, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	4319      	orrs	r1, r3
 8000a0a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a16:	fb07 1114 	mls	r1, r7, r4, r1
 8000a1a:	fa1f f68c 	uxth.w	r6, ip
 8000a1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a26:	fb04 f106 	mul.w	r1, r4, r6
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	d90a      	bls.n	8000a44 <__udivmoddi4+0x64>
 8000a2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a32:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a36:	f080 8110 	bcs.w	8000c5a <__udivmoddi4+0x27a>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 810d 	bls.w	8000c5a <__udivmoddi4+0x27a>
 8000a40:	3c02      	subs	r4, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a59      	subs	r1, r3, r1
 8000a46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a4e:	fb00 f606 	mul.w	r6, r0, r6
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	429e      	cmp	r6, r3
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x94>
 8000a5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a62:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a66:	f080 80fa 	bcs.w	8000c5e <__udivmoddi4+0x27e>
 8000a6a:	429e      	cmp	r6, r3
 8000a6c:	f240 80f7 	bls.w	8000c5e <__udivmoddi4+0x27e>
 8000a70:	4463      	add	r3, ip
 8000a72:	3802      	subs	r0, #2
 8000a74:	2100      	movs	r1, #0
 8000a76:	1b9b      	subs	r3, r3, r6
 8000a78:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a7c:	b11d      	cbz	r5, 8000a86 <__udivmoddi4+0xa6>
 8000a7e:	40d3      	lsrs	r3, r2
 8000a80:	2200      	movs	r2, #0
 8000a82:	e9c5 3200 	strd	r3, r2, [r5]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d905      	bls.n	8000a9a <__udivmoddi4+0xba>
 8000a8e:	b10d      	cbz	r5, 8000a94 <__udivmoddi4+0xb4>
 8000a90:	e9c5 0100 	strd	r0, r1, [r5]
 8000a94:	2100      	movs	r1, #0
 8000a96:	4608      	mov	r0, r1
 8000a98:	e7f5      	b.n	8000a86 <__udivmoddi4+0xa6>
 8000a9a:	fab3 f183 	clz	r1, r3
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	d146      	bne.n	8000b30 <__udivmoddi4+0x150>
 8000aa2:	42a3      	cmp	r3, r4
 8000aa4:	d302      	bcc.n	8000aac <__udivmoddi4+0xcc>
 8000aa6:	4290      	cmp	r0, r2
 8000aa8:	f0c0 80ee 	bcc.w	8000c88 <__udivmoddi4+0x2a8>
 8000aac:	1a86      	subs	r6, r0, r2
 8000aae:	eb64 0303 	sbc.w	r3, r4, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d0e6      	beq.n	8000a86 <__udivmoddi4+0xa6>
 8000ab8:	e9c5 6300 	strd	r6, r3, [r5]
 8000abc:	e7e3      	b.n	8000a86 <__udivmoddi4+0xa6>
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	f040 808f 	bne.w	8000be2 <__udivmoddi4+0x202>
 8000ac4:	eba1 040c 	sub.w	r4, r1, ip
 8000ac8:	2101      	movs	r1, #1
 8000aca:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ace:	fa1f f78c 	uxth.w	r7, ip
 8000ad2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ad6:	fb08 4416 	mls	r4, r8, r6, r4
 8000ada:	fb07 f006 	mul.w	r0, r7, r6
 8000ade:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ae6:	4298      	cmp	r0, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x11c>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 34ff 	add.w	r4, r6, #4294967295
 8000af2:	d202      	bcs.n	8000afa <__udivmoddi4+0x11a>
 8000af4:	4298      	cmp	r0, r3
 8000af6:	f200 80cb 	bhi.w	8000c90 <__udivmoddi4+0x2b0>
 8000afa:	4626      	mov	r6, r4
 8000afc:	1a1c      	subs	r4, r3, r0
 8000afe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b02:	fb08 4410 	mls	r4, r8, r0, r4
 8000b06:	fb00 f707 	mul.w	r7, r0, r7
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b12:	429f      	cmp	r7, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x148>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x146>
 8000b20:	429f      	cmp	r7, r3
 8000b22:	f200 80ae 	bhi.w	8000c82 <__udivmoddi4+0x2a2>
 8000b26:	4620      	mov	r0, r4
 8000b28:	1bdb      	subs	r3, r3, r7
 8000b2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b2e:	e7a5      	b.n	8000a7c <__udivmoddi4+0x9c>
 8000b30:	f1c1 0720 	rsb	r7, r1, #32
 8000b34:	408b      	lsls	r3, r1
 8000b36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3e:	fa24 f607 	lsr.w	r6, r4, r7
 8000b42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b46:	fbb6 f8f9 	udiv	r8, r6, r9
 8000b4a:	fa1f fe8c 	uxth.w	lr, ip
 8000b4e:	fb09 6618 	mls	r6, r9, r8, r6
 8000b52:	fa20 f307 	lsr.w	r3, r0, r7
 8000b56:	408c      	lsls	r4, r1
 8000b58:	fa00 fa01 	lsl.w	sl, r0, r1
 8000b5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000b60:	431c      	orrs	r4, r3
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b68:	4298      	cmp	r0, r3
 8000b6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x1a6>
 8000b70:	eb1c 0303 	adds.w	r3, ip, r3
 8000b74:	f108 36ff 	add.w	r6, r8, #4294967295
 8000b78:	f080 8081 	bcs.w	8000c7e <__udivmoddi4+0x29e>
 8000b7c:	4298      	cmp	r0, r3
 8000b7e:	d97e      	bls.n	8000c7e <__udivmoddi4+0x29e>
 8000b80:	f1a8 0802 	sub.w	r8, r8, #2
 8000b84:	4463      	add	r3, ip
 8000b86:	1a1e      	subs	r6, r3, r0
 8000b88:	fbb6 f3f9 	udiv	r3, r6, r9
 8000b8c:	fb09 6613 	mls	r6, r9, r3, r6
 8000b90:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b94:	b2a4      	uxth	r4, r4
 8000b96:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b9a:	45a6      	cmp	lr, r4
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x1d0>
 8000b9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba2:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ba6:	d266      	bcs.n	8000c76 <__udivmoddi4+0x296>
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d964      	bls.n	8000c76 <__udivmoddi4+0x296>
 8000bac:	3b02      	subs	r3, #2
 8000bae:	4464      	add	r4, ip
 8000bb0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000bb4:	fba0 8302 	umull	r8, r3, r0, r2
 8000bb8:	eba4 040e 	sub.w	r4, r4, lr
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	46c6      	mov	lr, r8
 8000bc0:	461e      	mov	r6, r3
 8000bc2:	d350      	bcc.n	8000c66 <__udivmoddi4+0x286>
 8000bc4:	d04d      	beq.n	8000c62 <__udivmoddi4+0x282>
 8000bc6:	b155      	cbz	r5, 8000bde <__udivmoddi4+0x1fe>
 8000bc8:	ebba 030e 	subs.w	r3, sl, lr
 8000bcc:	eb64 0406 	sbc.w	r4, r4, r6
 8000bd0:	fa04 f707 	lsl.w	r7, r4, r7
 8000bd4:	40cb      	lsrs	r3, r1
 8000bd6:	431f      	orrs	r7, r3
 8000bd8:	40cc      	lsrs	r4, r1
 8000bda:	e9c5 7400 	strd	r7, r4, [r5]
 8000bde:	2100      	movs	r1, #0
 8000be0:	e751      	b.n	8000a86 <__udivmoddi4+0xa6>
 8000be2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be6:	f1c2 0320 	rsb	r3, r2, #32
 8000bea:	40d9      	lsrs	r1, r3
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf8:	fbb1 f0f8 	udiv	r0, r1, r8
 8000bfc:	fb08 1110 	mls	r1, r8, r0, r1
 8000c00:	4094      	lsls	r4, r2
 8000c02:	431c      	orrs	r4, r3
 8000c04:	fa1f f78c 	uxth.w	r7, ip
 8000c08:	0c23      	lsrs	r3, r4, #16
 8000c0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0e:	fb00 f107 	mul.w	r1, r0, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x248>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c1e:	d22c      	bcs.n	8000c7a <__udivmoddi4+0x29a>
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d92a      	bls.n	8000c7a <__udivmoddi4+0x29a>
 8000c24:	3802      	subs	r0, #2
 8000c26:	4463      	add	r3, ip
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c2e:	fb08 3311 	mls	r3, r8, r1, r3
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb01 f307 	mul.w	r3, r1, r7
 8000c3c:	42a3      	cmp	r3, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x272>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c48:	d213      	bcs.n	8000c72 <__udivmoddi4+0x292>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d911      	bls.n	8000c72 <__udivmoddi4+0x292>
 8000c4e:	3902      	subs	r1, #2
 8000c50:	4464      	add	r4, ip
 8000c52:	1ae4      	subs	r4, r4, r3
 8000c54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xf2>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	e6f2      	b.n	8000a44 <__udivmoddi4+0x64>
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e708      	b.n	8000a74 <__udivmoddi4+0x94>
 8000c62:	45c2      	cmp	sl, r8
 8000c64:	d2af      	bcs.n	8000bc6 <__udivmoddi4+0x1e6>
 8000c66:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6a:	eb63 060c 	sbc.w	r6, r3, ip
 8000c6e:	3801      	subs	r0, #1
 8000c70:	e7a9      	b.n	8000bc6 <__udivmoddi4+0x1e6>
 8000c72:	4631      	mov	r1, r6
 8000c74:	e7ed      	b.n	8000c52 <__udivmoddi4+0x272>
 8000c76:	4603      	mov	r3, r0
 8000c78:	e79a      	b.n	8000bb0 <__udivmoddi4+0x1d0>
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	e7d4      	b.n	8000c28 <__udivmoddi4+0x248>
 8000c7e:	46b0      	mov	r8, r6
 8000c80:	e781      	b.n	8000b86 <__udivmoddi4+0x1a6>
 8000c82:	4463      	add	r3, ip
 8000c84:	3802      	subs	r0, #2
 8000c86:	e74f      	b.n	8000b28 <__udivmoddi4+0x148>
 8000c88:	4606      	mov	r6, r0
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	e711      	b.n	8000ab4 <__udivmoddi4+0xd4>
 8000c90:	3e02      	subs	r6, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	e732      	b.n	8000afc <__udivmoddi4+0x11c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <SHT30_ReadTempHum>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef SHT30_ReadTempHum()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af02      	add	r7, sp, #8
	uint8_t cmd[2] = {(SHT30_MEAS_HIGHREP_STRETCH >> 8), (SHT30_MEAS_HIGHREP_STRETCH & 0xFF)};
 8000ca2:	f240 632c 	movw	r3, #1580	@ 0x62c
 8000ca6:	813b      	strh	r3, [r7, #8]
	uint8_t data[6];

	if(HAL_I2C_Master_Transmit(&hi2c1, SHT30_SENSOR_ADDR, cmd, 2, HAL_MAX_DELAY) != HAL_OK)
 8000ca8:	f107 0208 	add.w	r2, r7, #8
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	2188      	movs	r1, #136	@ 0x88
 8000cb6:	482b      	ldr	r0, [pc, #172]	@ (8000d64 <SHT30_ReadTempHum+0xc8>)
 8000cb8:	f000 fef0 	bl	8001a9c <HAL_I2C_Master_Transmit>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SHT30_ReadTempHum+0x2a>
		return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e04a      	b.n	8000d5c <SHT30_ReadTempHum+0xc0>

	HAL_Delay(15);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 fb0e 	bl	80012e8 <HAL_Delay>

	if(HAL_I2C_Master_Receive(&hi2c1, SHT30_SENSOR_ADDR, data, 6, HAL_MAX_DELAY) != HAL_OK)
 8000ccc:	463a      	mov	r2, r7
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	2188      	movs	r1, #136	@ 0x88
 8000cd8:	4822      	ldr	r0, [pc, #136]	@ (8000d64 <SHT30_ReadTempHum+0xc8>)
 8000cda:	f000 ffdd 	bl	8001c98 <HAL_I2C_Master_Receive>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SHT30_ReadTempHum+0x4c>
		return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e039      	b.n	8000d5c <SHT30_ReadTempHum+0xc0>
	uint16_t temperature_raw = (data[0] << 8)| data[1];
 8000ce8:	783b      	ldrb	r3, [r7, #0]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	787b      	ldrb	r3, [r7, #1]
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	81fb      	strh	r3, [r7, #14]
	uint16_t humidity_raw = (data[3] << 8) | data[4];
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	793b      	ldrb	r3, [r7, #4]
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	81bb      	strh	r3, [r7, #12]

	temperature = -45.0f + 175.0f * temperature_raw / 65535.0f;;
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fcac 	bl	8000668 <__aeabi_i2f>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4915      	ldr	r1, [pc, #84]	@ (8000d68 <SHT30_ReadTempHum+0xcc>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fcfb 	bl	8000710 <__aeabi_fmul>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4913      	ldr	r1, [pc, #76]	@ (8000d6c <SHT30_ReadTempHum+0xd0>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fdaa 	bl	8000878 <__aeabi_fdiv>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4912      	ldr	r1, [pc, #72]	@ (8000d70 <SHT30_ReadTempHum+0xd4>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fbe7 	bl	80004fc <__aeabi_fsub>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <SHT30_ReadTempHum+0xd8>)
 8000d34:	601a      	str	r2, [r3, #0]
	humidity = 100.0f * humidity_raw / 65535.0f;
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fc95 	bl	8000668 <__aeabi_i2f>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <SHT30_ReadTempHum+0xdc>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fce4 	bl	8000710 <__aeabi_fmul>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4908      	ldr	r1, [pc, #32]	@ (8000d6c <SHT30_ReadTempHum+0xd0>)
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fd93 	bl	8000878 <__aeabi_fdiv>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <SHT30_ReadTempHum+0xe0>)
 8000d58:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000084 	.word	0x20000084
 8000d68:	432f0000 	.word	0x432f0000
 8000d6c:	477fff00 	.word	0x477fff00
 8000d70:	42340000 	.word	0x42340000
 8000d74:	200000d8 	.word	0x200000d8
 8000d78:	42c80000 	.word	0x42c80000
 8000d7c:	200000dc 	.word	0x200000dc

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 fa40 	bl	800120a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f82f 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 f8a9 	bl	8000ee4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d92:	f000 f879 	bl	8000e88 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(SHT30_ReadTempHum() == HAL_OK)
 8000d96:	f7ff ff81 	bl	8000c9c <SHT30_ReadTempHum>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d119      	bne.n	8000dd4 <main+0x54>
	  {
		  printf("Temperature = %.2f | Humidity = %.2f", temperature, humidity);
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <main+0x5c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fb4d 	bl	8000444 <__aeabi_f2d>
 8000daa:	4604      	mov	r4, r0
 8000dac:	460d      	mov	r5, r1
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <main+0x60>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb46 	bl	8000444 <__aeabi_f2d>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	e9cd 2300 	strd	r2, r3, [sp]
 8000dc0:	4622      	mov	r2, r4
 8000dc2:	462b      	mov	r3, r5
 8000dc4:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <main+0x64>)
 8000dc6:	f002 fbc3 	bl	8003550 <iprintf>
		  HAL_Delay(2000);
 8000dca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dce:	f000 fa8b 	bl	80012e8 <HAL_Delay>
 8000dd2:	e7e0      	b.n	8000d96 <main+0x16>
	  }
	  else
	  {
		  printf("Error Timed Out");
 8000dd4:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <main+0x68>)
 8000dd6:	f002 fbbb 	bl	8003550 <iprintf>
	  if(SHT30_ReadTempHum() == HAL_OK)
 8000dda:	e7dc      	b.n	8000d96 <main+0x16>
 8000ddc:	200000d8 	.word	0x200000d8
 8000de0:	200000dc 	.word	0x200000dc
 8000de4:	08004258 	.word	0x08004258
 8000de8:	08004280 	.word	0x08004280

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b092      	sub	sp, #72	@ 0x48
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2234      	movs	r2, #52	@ 0x34
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fbfd 	bl	80035fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <SystemClock_Config+0x98>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000e16:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <SystemClock_Config+0x98>)
 8000e18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e1c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e22:	2301      	movs	r3, #1
 8000e24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e26:	2310      	movs	r3, #16
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e32:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000e36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000e38:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000e3c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 fce0 	bl	8002808 <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4e:	f000 f86b 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2303      	movs	r3, #3
 8000e58:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fffc 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e76:	f000 f857 	bl	8000f28 <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3748      	adds	r7, #72	@ 0x48
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40007000 	.word	0x40007000

08000e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000e8e:	4a13      	ldr	r2, [pc, #76]	@ (8000edc <MX_I2C1_Init+0x54>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <MX_I2C1_Init+0x58>)
 8000e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec6:	f000 fca5 	bl	8001814 <HAL_I2C_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed0:	f000 f82a 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000084 	.word	0x20000084
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	000186a0 	.word	0x000186a0

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_GPIO_Init+0x40>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <MX_GPIO_Init+0x40>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_GPIO_Init+0x40>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <MX_GPIO_Init+0x40>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <MX_GPIO_Init+0x40>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <MX_GPIO_Init+0x40>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40023800 	.word	0x40023800

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <Error_Handler+0x8>

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_MspInit+0x5c>)
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_MspInit+0x5c>)
 8000f40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f44:	6253      	str	r3, [r2, #36]	@ 0x24
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_MspInit+0x5c>)
 8000f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_MspInit+0x5c>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_MspInit+0x5c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_MspInit+0x5c>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <HAL_MspInit+0x5c>)
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_MspInit+0x5c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	6253      	str	r3, [r2, #36]	@ 0x24
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_MspInit+0x5c>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f82:	2007      	movs	r0, #7
 8000f84:	f000 fa82 	bl	800148c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a17      	ldr	r2, [pc, #92]	@ (8001010 <HAL_I2C_MspInit+0x7c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d127      	bne.n	8001006 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <HAL_I2C_MspInit+0x80>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a16      	ldr	r2, [pc, #88]	@ (8001014 <HAL_I2C_MspInit+0x80>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_I2C_MspInit+0x80>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fce:	23c0      	movs	r3, #192	@ 0xc0
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480b      	ldr	r0, [pc, #44]	@ (8001018 <HAL_I2C_MspInit+0x84>)
 8000fea:	f000 fa83 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <HAL_I2C_MspInit+0x80>)
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff2:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <HAL_I2C_MspInit+0x80>)
 8000ff4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	6253      	str	r3, [r2, #36]	@ 0x24
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_I2C_MspInit+0x80>)
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	@ 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40005400 	.word	0x40005400
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <NMI_Handler+0x4>

08001024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <MemManage_Handler+0x4>

08001034 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <UsageFault_Handler+0x4>

08001044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 f920 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00a      	b.n	800109c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001086:	f3af 8000 	nop.w
 800108a:	4601      	mov	r1, r0
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	b2ca      	uxtb	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf0      	blt.n	8001086 <_read+0x12>
  }

  return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e009      	b.n	80010d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf1      	blt.n	80010c0 <_write+0x12>
  }
  return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_close>:

int _close(int file)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800110c:	605a      	str	r2, [r3, #4]
  return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <_isatty>:

int _isatty(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
	...

08001148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001150:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001178:	f002 fa8e 	bl	8003698 <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20014000 	.word	0x20014000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	200000e0 	.word	0x200000e0
 80011b0:	20000238 	.word	0x20000238

080011b4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c0:	f7ff fff8 	bl	80011b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011c6:	490c      	ldr	r1, [pc, #48]	@ (80011f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011c8:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a09      	ldr	r2, [pc, #36]	@ (8001200 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011dc:	4c09      	ldr	r4, [pc, #36]	@ (8001204 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ea:	f002 fa5b 	bl	80036a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ee:	f7ff fdc7 	bl	8000d80 <main>
  bx lr
 80011f2:	4770      	bx	lr
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011fc:	080042f8 	.word	0x080042f8
  ldr r2, =_sbss
 8001200:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001204:	20000234 	.word	0x20000234

08001208 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_IRQHandler>

0800120a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f939 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121a:	2000      	movs	r0, #0
 800121c:	f000 f80e 	bl	800123c <HAL_InitTick>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	e001      	b.n	8001230 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800122c:	f7ff fe82 	bl	8000f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001230:	79fb      	ldrb	r3, [r7, #7]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <HAL_InitTick+0x68>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d022      	beq.n	8001296 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_InitTick+0x6c>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <HAL_InitTick+0x68>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800125c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001260:	fbb2 f3f3 	udiv	r3, r2, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f938 	bl	80014da <HAL_SYSTICK_Config>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10f      	bne.n	8001290 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d809      	bhi.n	800128a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001276:	2200      	movs	r2, #0
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	f04f 30ff 	mov.w	r0, #4294967295
 800127e:	f000 f910 	bl	80014a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <HAL_InitTick+0x70>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e007      	b.n	800129a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	e004      	b.n	800129a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e001      	b.n	800129a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <HAL_IncTick+0x1c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_IncTick+0x20>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	4a03      	ldr	r2, [pc, #12]	@ (80012cc <HAL_IncTick+0x1c>)
 80012c0:	6013      	str	r3, [r2, #0]
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200000e4 	.word	0x200000e4
 80012d0:	20000008 	.word	0x20000008

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b02      	ldr	r3, [pc, #8]	@ (80012e4 <HAL_GetTick+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	200000e4 	.word	0x200000e4

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff fff0 	bl	80012d4 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d004      	beq.n	800130c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <HAL_Delay+0x40>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130c:	bf00      	nop
 800130e:	f7ff ffe1 	bl	80012d4 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	429a      	cmp	r2, r3
 800131c:	d8f7      	bhi.n	800130e <HAL_Delay+0x26>
  {
  }
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000008 	.word	0x20000008

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	@ (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	@ (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff90 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff49 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff5e 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffb0 	bl	8001448 <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800150a:	e160      	b.n	80017ce <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8152 	beq.w	80017c8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d005      	beq.n	800153c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001538:	2b02      	cmp	r3, #2
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 0201 	and.w	r2, r3, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d017      	beq.n	80015da <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d123      	bne.n	800162e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0203 	and.w	r2, r3, #3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80ac 	beq.w	80017c8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001670:	4b5e      	ldr	r3, [pc, #376]	@ (80017ec <HAL_GPIO_Init+0x2f8>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a5d      	ldr	r2, [pc, #372]	@ (80017ec <HAL_GPIO_Init+0x2f8>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	4b5b      	ldr	r3, [pc, #364]	@ (80017ec <HAL_GPIO_Init+0x2f8>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001688:	4a59      	ldr	r2, [pc, #356]	@ (80017f0 <HAL_GPIO_Init+0x2fc>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a51      	ldr	r2, [pc, #324]	@ (80017f4 <HAL_GPIO_Init+0x300>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d025      	beq.n	8001700 <HAL_GPIO_Init+0x20c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a50      	ldr	r2, [pc, #320]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d01f      	beq.n	80016fc <HAL_GPIO_Init+0x208>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a4f      	ldr	r2, [pc, #316]	@ (80017fc <HAL_GPIO_Init+0x308>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d019      	beq.n	80016f8 <HAL_GPIO_Init+0x204>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a4e      	ldr	r2, [pc, #312]	@ (8001800 <HAL_GPIO_Init+0x30c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d013      	beq.n	80016f4 <HAL_GPIO_Init+0x200>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001804 <HAL_GPIO_Init+0x310>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00d      	beq.n	80016f0 <HAL_GPIO_Init+0x1fc>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001808 <HAL_GPIO_Init+0x314>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d007      	beq.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a4b      	ldr	r2, [pc, #300]	@ (800180c <HAL_GPIO_Init+0x318>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d101      	bne.n	80016e8 <HAL_GPIO_Init+0x1f4>
 80016e4:	2306      	movs	r3, #6
 80016e6:	e00c      	b.n	8001702 <HAL_GPIO_Init+0x20e>
 80016e8:	2307      	movs	r3, #7
 80016ea:	e00a      	b.n	8001702 <HAL_GPIO_Init+0x20e>
 80016ec:	2305      	movs	r3, #5
 80016ee:	e008      	b.n	8001702 <HAL_GPIO_Init+0x20e>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_Init+0x20e>
 80016f4:	2303      	movs	r3, #3
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_Init+0x20e>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x20e>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_Init+0x20e>
 8001700:	2300      	movs	r3, #0
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001712:	4937      	ldr	r1, [pc, #220]	@ (80017f0 <HAL_GPIO_Init+0x2fc>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001720:	4b3b      	ldr	r3, [pc, #236]	@ (8001810 <HAL_GPIO_Init+0x31c>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001744:	4a32      	ldr	r2, [pc, #200]	@ (8001810 <HAL_GPIO_Init+0x31c>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800174a:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <HAL_GPIO_Init+0x31c>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800176e:	4a28      	ldr	r2, [pc, #160]	@ (8001810 <HAL_GPIO_Init+0x31c>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001774:	4b26      	ldr	r3, [pc, #152]	@ (8001810 <HAL_GPIO_Init+0x31c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001798:	4a1d      	ldr	r2, [pc, #116]	@ (8001810 <HAL_GPIO_Init+0x31c>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800179e:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <HAL_GPIO_Init+0x31c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017c2:	4a13      	ldr	r2, [pc, #76]	@ (8001810 <HAL_GPIO_Init+0x31c>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f47f ae97 	bne.w	800150c <HAL_GPIO_Init+0x18>
  }
}
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40010000 	.word	0x40010000
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40021400 	.word	0x40021400
 800180c:	40021800 	.word	0x40021800
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e12b      	b.n	8001a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fbaa 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	@ 0x24
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001878:	f001 fd34 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 800187c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a81      	ldr	r2, [pc, #516]	@ (8001a88 <HAL_I2C_Init+0x274>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d807      	bhi.n	8001898 <HAL_I2C_Init+0x84>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4a80      	ldr	r2, [pc, #512]	@ (8001a8c <HAL_I2C_Init+0x278>)
 800188c:	4293      	cmp	r3, r2
 800188e:	bf94      	ite	ls
 8001890:	2301      	movls	r3, #1
 8001892:	2300      	movhi	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	e006      	b.n	80018a6 <HAL_I2C_Init+0x92>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a90 <HAL_I2C_Init+0x27c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	bf94      	ite	ls
 80018a0:	2301      	movls	r3, #1
 80018a2:	2300      	movhi	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0e7      	b.n	8001a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4a78      	ldr	r2, [pc, #480]	@ (8001a94 <HAL_I2C_Init+0x280>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001a88 <HAL_I2C_Init+0x274>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d802      	bhi.n	80018e8 <HAL_I2C_Init+0xd4>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3301      	adds	r3, #1
 80018e6:	e009      	b.n	80018fc <HAL_I2C_Init+0xe8>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	4a69      	ldr	r2, [pc, #420]	@ (8001a98 <HAL_I2C_Init+0x284>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	3301      	adds	r3, #1
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	430b      	orrs	r3, r1
 8001902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800190e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	495c      	ldr	r1, [pc, #368]	@ (8001a88 <HAL_I2C_Init+0x274>)
 8001918:	428b      	cmp	r3, r1
 800191a:	d819      	bhi.n	8001950 <HAL_I2C_Init+0x13c>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e59      	subs	r1, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fbb1 f3f3 	udiv	r3, r1, r3
 800192a:	1c59      	adds	r1, r3, #1
 800192c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001930:	400b      	ands	r3, r1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00a      	beq.n	800194c <HAL_I2C_Init+0x138>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1e59      	subs	r1, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fbb1 f3f3 	udiv	r3, r1, r3
 8001944:	3301      	adds	r3, #1
 8001946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194a:	e051      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 800194c:	2304      	movs	r3, #4
 800194e:	e04f      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d111      	bne.n	800197c <HAL_I2C_Init+0x168>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1e58      	subs	r0, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	440b      	add	r3, r1
 8001966:	fbb0 f3f3 	udiv	r3, r0, r3
 800196a:	3301      	adds	r3, #1
 800196c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	e012      	b.n	80019a2 <HAL_I2C_Init+0x18e>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1e58      	subs	r0, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	0099      	lsls	r1, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001992:	3301      	adds	r3, #1
 8001994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Init+0x196>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e022      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10e      	bne.n	80019d0 <HAL_I2C_Init+0x1bc>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1e58      	subs	r0, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6859      	ldr	r1, [r3, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	440b      	add	r3, r1
 80019c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ce:	e00f      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e58      	subs	r0, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	0099      	lsls	r1, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	6809      	ldr	r1, [r1, #0]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6911      	ldr	r1, [r2, #16]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68d2      	ldr	r2, [r2, #12]
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	000186a0 	.word	0x000186a0
 8001a8c:	001e847f 	.word	0x001e847f
 8001a90:	003d08ff 	.word	0x003d08ff
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	10624dd3 	.word	0x10624dd3

08001a9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	817b      	strh	r3, [r7, #10]
 8001aac:	4613      	mov	r3, r2
 8001aae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff fc10 	bl	80012d4 <HAL_GetTick>
 8001ab4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	f040 80e0 	bne.w	8001c84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2319      	movs	r3, #25
 8001aca:	2201      	movs	r2, #1
 8001acc:	4970      	ldr	r1, [pc, #448]	@ (8001c90 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 fc64 	bl	800239c <I2C_WaitOnFlagUntilTimeout>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ada:	2302      	movs	r3, #2
 8001adc:	e0d3      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_I2C_Master_Transmit+0x50>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e0cc      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d007      	beq.n	8001b12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2221      	movs	r2, #33	@ 0x21
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	893a      	ldrh	r2, [r7, #8]
 8001b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4a50      	ldr	r2, [pc, #320]	@ (8001c94 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b54:	8979      	ldrh	r1, [r7, #10]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 face 	bl	80020fc <I2C_MasterRequestWrite>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e08d      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b80:	e066      	b.n	8001c50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	6a39      	ldr	r1, [r7, #32]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 fd22 	bl	80025d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00d      	beq.n	8001bae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d107      	bne.n	8001baa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06b      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d11b      	bne.n	8001c24 <HAL_I2C_Master_Transmit+0x188>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d017      	beq.n	8001c24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	6a39      	ldr	r1, [r7, #32]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fd19 	bl	8002660 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00d      	beq.n	8001c50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d107      	bne.n	8001c4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e01a      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d194      	bne.n	8001b82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e000      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	00100002 	.word	0x00100002
 8001c94:	ffff0000 	.word	0xffff0000

08001c98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	@ 0x30
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	817b      	strh	r3, [r7, #10]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff fb12 	bl	80012d4 <HAL_GetTick>
 8001cb0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	f040 8217 	bne.w	80020ee <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2319      	movs	r3, #25
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	497c      	ldr	r1, [pc, #496]	@ (8001ebc <HAL_I2C_Master_Receive+0x224>)
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 fb66 	bl	800239c <I2C_WaitOnFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e20a      	b.n	80020f0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_I2C_Master_Receive+0x50>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e203      	b.n	80020f0 <HAL_I2C_Master_Receive+0x458>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d007      	beq.n	8001d0e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2222      	movs	r2, #34	@ 0x22
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	893a      	ldrh	r2, [r7, #8]
 8001d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec0 <HAL_I2C_Master_Receive+0x228>)
 8001d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d50:	8979      	ldrh	r1, [r7, #10]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fa52 	bl	8002200 <I2C_MasterRequestRead>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e1c4      	b.n	80020f0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d113      	bne.n	8001d96 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e198      	b.n	80020c8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e178      	b.n	80020c8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d11b      	bne.n	8001e16 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	e158      	b.n	80020c8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e3c:	e144      	b.n	80020c8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	f200 80f1 	bhi.w	800202a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d123      	bne.n	8001e98 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 fc4b 	bl	80026f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e145      	b.n	80020f0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e96:	e117      	b.n	80020c8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d14e      	bne.n	8001f3e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4906      	ldr	r1, [pc, #24]	@ (8001ec4 <HAL_I2C_Master_Receive+0x22c>)
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fa76 	bl	800239c <I2C_WaitOnFlagUntilTimeout>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d008      	beq.n	8001ec8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e11a      	b.n	80020f0 <HAL_I2C_Master_Receive+0x458>
 8001eba:	bf00      	nop
 8001ebc:	00100002 	.word	0x00100002
 8001ec0:	ffff0000 	.word	0xffff0000
 8001ec4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f3c:	e0c4      	b.n	80020c8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f44:	2200      	movs	r2, #0
 8001f46:	496c      	ldr	r1, [pc, #432]	@ (80020f8 <HAL_I2C_Master_Receive+0x460>)
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fa27 	bl	800239c <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0cb      	b.n	80020f0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4955      	ldr	r1, [pc, #340]	@ (80020f8 <HAL_I2C_Master_Receive+0x460>)
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f9f9 	bl	800239c <I2C_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e09d      	b.n	80020f0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002028:	e04e      	b.n	80020c8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fb5e 	bl	80026f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e058      	b.n	80020f0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d124      	bne.n	80020c8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002082:	2b03      	cmp	r3, #3
 8002084:	d107      	bne.n	8002096 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002094:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f47f aeb6 	bne.w	8001e3e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
  }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3728      	adds	r7, #40	@ 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	00010004 	.word	0x00010004

080020fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	460b      	mov	r3, r1
 800210a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d006      	beq.n	8002126 <I2C_MasterRequestWrite+0x2a>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d003      	beq.n	8002126 <I2C_MasterRequestWrite+0x2a>
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002124:	d108      	bne.n	8002138 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e00b      	b.n	8002150 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	2b12      	cmp	r3, #18
 800213e:	d107      	bne.n	8002150 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800214e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f91d 	bl	800239c <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002176:	d103      	bne.n	8002180 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800217e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e035      	b.n	80021f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800218c:	d108      	bne.n	80021a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800218e:	897b      	ldrh	r3, [r7, #10]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800219c:	611a      	str	r2, [r3, #16]
 800219e:	e01b      	b.n	80021d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021a0:	897b      	ldrh	r3, [r7, #10]
 80021a2:	11db      	asrs	r3, r3, #7
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f003 0306 	and.w	r3, r3, #6
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f063 030f 	orn	r3, r3, #15
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	490e      	ldr	r1, [pc, #56]	@ (80021f8 <I2C_MasterRequestWrite+0xfc>)
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f966 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e010      	b.n	80021f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021ce:	897b      	ldrh	r3, [r7, #10]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4907      	ldr	r1, [pc, #28]	@ (80021fc <I2C_MasterRequestWrite+0x100>)
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f956 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	00010008 	.word	0x00010008
 80021fc:	00010002 	.word	0x00010002

08002200 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	460b      	mov	r3, r1
 800220e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002214:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002224:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d006      	beq.n	800223a <I2C_MasterRequestRead+0x3a>
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d003      	beq.n	800223a <I2C_MasterRequestRead+0x3a>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002238:	d108      	bne.n	800224c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e00b      	b.n	8002264 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	2b11      	cmp	r3, #17
 8002252:	d107      	bne.n	8002264 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f893 	bl	800239c <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800228a:	d103      	bne.n	8002294 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e079      	b.n	800238c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022a0:	d108      	bne.n	80022b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	e05f      	b.n	8002374 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	11db      	asrs	r3, r3, #7
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 0306 	and.w	r3, r3, #6
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f063 030f 	orn	r3, r3, #15
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4930      	ldr	r1, [pc, #192]	@ (8002394 <I2C_MasterRequestRead+0x194>)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f8dc 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e054      	b.n	800238c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4929      	ldr	r1, [pc, #164]	@ (8002398 <I2C_MasterRequestRead+0x198>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f8cc 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e044      	b.n	800238c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002326:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f831 	bl	800239c <I2C_WaitOnFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800234e:	d103      	bne.n	8002358 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e017      	b.n	800238c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800235c:	897b      	ldrh	r3, [r7, #10]
 800235e:	11db      	asrs	r3, r3, #7
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f003 0306 	and.w	r3, r3, #6
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f063 030e 	orn	r3, r3, #14
 800236c:	b2da      	uxtb	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4907      	ldr	r1, [pc, #28]	@ (8002398 <I2C_MasterRequestRead+0x198>)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f888 	bl	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	00010008 	.word	0x00010008
 8002398:	00010002 	.word	0x00010002

0800239c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ac:	e048      	b.n	8002440 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d044      	beq.n	8002440 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b6:	f7fe ff8d 	bl	80012d4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d302      	bcc.n	80023cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d139      	bne.n	8002440 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d10d      	bne.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	43da      	mvns	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	e00c      	b.n	800240c <I2C_WaitOnFlagUntilTimeout+0x70>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	43da      	mvns	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4013      	ands	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	429a      	cmp	r2, r3
 8002410:	d116      	bne.n	8002440 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e023      	b.n	8002488 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	0c1b      	lsrs	r3, r3, #16
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10d      	bne.n	8002466 <I2C_WaitOnFlagUntilTimeout+0xca>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	43da      	mvns	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	e00c      	b.n	8002480 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	43da      	mvns	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	429a      	cmp	r2, r3
 8002484:	d093      	beq.n	80023ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800249e:	e071      	b.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ae:	d123      	bne.n	80024f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	f043 0204 	orr.w	r2, r3, #4
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e067      	b.n	80025c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	d041      	beq.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002500:	f7fe fee8 	bl	80012d4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	d302      	bcc.n	8002516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d136      	bne.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10c      	bne.n	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4013      	ands	r3, r2
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	e00b      	b.n	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	43da      	mvns	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f043 0220 	orr.w	r2, r3, #32
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e021      	b.n	80025c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10c      	bne.n	80025a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	43da      	mvns	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	e00b      	b.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4013      	ands	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f af6d 	bne.w	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025dc:	e034      	b.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f8e3 	bl	80027aa <I2C_IsAcknowledgeFailed>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e034      	b.n	8002658 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f4:	d028      	beq.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f6:	f7fe fe6d 	bl	80012d4 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	429a      	cmp	r2, r3
 8002604:	d302      	bcc.n	800260c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d11d      	bne.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002616:	2b80      	cmp	r3, #128	@ 0x80
 8002618:	d016      	beq.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e007      	b.n	8002658 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002652:	2b80      	cmp	r3, #128	@ 0x80
 8002654:	d1c3      	bne.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800266c:	e034      	b.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f89b 	bl	80027aa <I2C_IsAcknowledgeFailed>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e034      	b.n	80026e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d028      	beq.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002686:	f7fe fe25 	bl	80012d4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d11d      	bne.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d016      	beq.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e007      	b.n	80026e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d1c3      	bne.n	800266e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026fc:	e049      	b.n	8002792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b10      	cmp	r3, #16
 800270a:	d119      	bne.n	8002740 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0210 	mvn.w	r2, #16
 8002714:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e030      	b.n	80027a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002740:	f7fe fdc8 	bl	80012d4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	429a      	cmp	r2, r3
 800274e:	d302      	bcc.n	8002756 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11d      	bne.n	8002792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002760:	2b40      	cmp	r3, #64	@ 0x40
 8002762:	d016      	beq.n	8002792 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e007      	b.n	80027a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279c:	2b40      	cmp	r3, #64	@ 0x40
 800279e:	d1ae      	bne.n	80026fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027c0:	d11b      	bne.n	80027fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f043 0204 	orr.w	r2, r3, #4
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
	...

08002808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e31d      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281a:	4b94      	ldr	r3, [pc, #592]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002824:	4b91      	ldr	r3, [pc, #580]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d07b      	beq.n	8002932 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b08      	cmp	r3, #8
 800283e:	d006      	beq.n	800284e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d10f      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800284c:	d10b      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284e:	4b87      	ldr	r3, [pc, #540]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d06a      	beq.n	8002930 <HAL_RCC_OscConfig+0x128>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d166      	bne.n	8002930 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e2f7      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x74>
 800286e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7e      	ldr	r2, [pc, #504]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e02d      	b.n	80028d8 <HAL_RCC_OscConfig+0xd0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10c      	bne.n	800289e <HAL_RCC_OscConfig+0x96>
 8002884:	4b79      	ldr	r3, [pc, #484]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a78      	ldr	r2, [pc, #480]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b76      	ldr	r3, [pc, #472]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a75      	ldr	r2, [pc, #468]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e01c      	b.n	80028d8 <HAL_RCC_OscConfig+0xd0>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0xb8>
 80028a6:	4b71      	ldr	r3, [pc, #452]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a70      	ldr	r2, [pc, #448]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b6e      	ldr	r3, [pc, #440]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6d      	ldr	r2, [pc, #436]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xd0>
 80028c0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a69      	ldr	r2, [pc, #420]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b67      	ldr	r3, [pc, #412]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a66      	ldr	r2, [pc, #408]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fcf8 	bl	80012d4 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe fcf4 	bl	80012d4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e2ad      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028fa:	4b5c      	ldr	r3, [pc, #368]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe0>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe fce4 	bl	80012d4 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe fce0 	bl	80012d4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e299      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002922:	4b52      	ldr	r3, [pc, #328]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x108>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d05a      	beq.n	80029f4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d005      	beq.n	8002950 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d119      	bne.n	800297e <HAL_RCC_OscConfig+0x176>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d116      	bne.n	800297e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002950:	4b46      	ldr	r3, [pc, #280]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_OscConfig+0x160>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e276      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002968:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	493d      	ldr	r1, [pc, #244]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297c:	e03a      	b.n	80029f4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d020      	beq.n	80029c8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002986:	4b3a      	ldr	r3, [pc, #232]	@ (8002a70 <HAL_RCC_OscConfig+0x268>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fca2 	bl	80012d4 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fc9e 	bl	80012d4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e257      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a6:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	492a      	ldr	r1, [pc, #168]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
 80029c6:	e015      	b.n	80029f4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c8:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <HAL_RCC_OscConfig+0x268>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fc81 	bl	80012d4 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fe fc7d 	bl	80012d4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e236      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e8:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80b8 	beq.w	8002b72 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d170      	bne.n	8002aea <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_OscConfig+0x218>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e21a      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d921      	bls.n	8002a74 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fc69 	bl	800330c <RCC_SetFlashLatencyFromMSIRange>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e208      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4906      	ldr	r1, [pc, #24]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a56:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	061b      	lsls	r3, r3, #24
 8002a64:	4901      	ldr	r1, [pc, #4]	@ (8002a6c <HAL_RCC_OscConfig+0x264>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
 8002a6a:	e020      	b.n	8002aae <HAL_RCC_OscConfig+0x2a6>
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a74:	4b99      	ldr	r3, [pc, #612]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4996      	ldr	r1, [pc, #600]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a86:	4b95      	ldr	r3, [pc, #596]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	061b      	lsls	r3, r3, #24
 8002a94:	4991      	ldr	r1, [pc, #580]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fc34 	bl	800330c <RCC_SetFlashLatencyFromMSIRange>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1d3      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	0b5b      	lsrs	r3, r3, #13
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002abe:	4a87      	ldr	r2, [pc, #540]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002ac0:	6892      	ldr	r2, [r2, #8]
 8002ac2:	0912      	lsrs	r2, r2, #4
 8002ac4:	f002 020f 	and.w	r2, r2, #15
 8002ac8:	4985      	ldr	r1, [pc, #532]	@ (8002ce0 <HAL_RCC_OscConfig+0x4d8>)
 8002aca:	5c8a      	ldrb	r2, [r1, r2]
 8002acc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ace:	4a85      	ldr	r2, [pc, #532]	@ (8002ce4 <HAL_RCC_OscConfig+0x4dc>)
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ad2:	4b85      	ldr	r3, [pc, #532]	@ (8002ce8 <HAL_RCC_OscConfig+0x4e0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fbb0 	bl	800123c <HAL_InitTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d045      	beq.n	8002b72 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	e1b5      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d029      	beq.n	8002b46 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002af2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cec <HAL_RCC_OscConfig+0x4e4>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fbec 	bl	80012d4 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b00:	f7fe fbe8 	bl	80012d4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1a1      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b12:	4b72      	ldr	r3, [pc, #456]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	496c      	ldr	r1, [pc, #432]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b30:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	4967      	ldr	r1, [pc, #412]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	e015      	b.n	8002b72 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b46:	4b69      	ldr	r3, [pc, #420]	@ (8002cec <HAL_RCC_OscConfig+0x4e4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fbc2 	bl	80012d4 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b54:	f7fe fbbe 	bl	80012d4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e177      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b66:	4b5d      	ldr	r3, [pc, #372]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d030      	beq.n	8002be0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b86:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fba2 	bl	80012d4 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b94:	f7fe fb9e 	bl	80012d4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e157      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x38c>
 8002bb2:	e015      	b.n	8002be0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb4:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fb8b 	bl	80012d4 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fb87 	bl	80012d4 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e140      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bd4:	4b41      	ldr	r3, [pc, #260]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80b5 	beq.w	8002d58 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	4b37      	ldr	r3, [pc, #220]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	4a36      	ldr	r2, [pc, #216]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c08:	6253      	str	r3, [r2, #36]	@ 0x24
 8002c0a:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d118      	bne.n	8002c58 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c26:	4b33      	ldr	r3, [pc, #204]	@ (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a32      	ldr	r2, [pc, #200]	@ (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c32:	f7fe fb4f 	bl	80012d4 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3a:	f7fe fb4b 	bl	80012d4 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b64      	cmp	r3, #100	@ 0x64
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e104      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	4b29      	ldr	r3, [pc, #164]	@ (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x466>
 8002c60:	4b1e      	ldr	r3, [pc, #120]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c64:	4a1d      	ldr	r2, [pc, #116]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c6c:	e02d      	b.n	8002cca <HAL_RCC_OscConfig+0x4c2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x488>
 8002c76:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7a:	4a18      	ldr	r2, [pc, #96]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c80:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c82:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c86:	4a15      	ldr	r2, [pc, #84]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c8c:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c8e:	e01c      	b.n	8002cca <HAL_RCC_OscConfig+0x4c2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4aa>
 8002c98:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca2:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cae:	6353      	str	r3, [r2, #52]	@ 0x34
 8002cb0:	e00b      	b.n	8002cca <HAL_RCC_OscConfig+0x4c2>
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cbc:	6353      	str	r3, [r2, #52]	@ 0x34
 8002cbe:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc2:	4a06      	ldr	r2, [pc, #24]	@ (8002cdc <HAL_RCC_OscConfig+0x4d4>)
 8002cc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cc8:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d024      	beq.n	8002d1c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe faff 	bl	80012d4 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd8:	e019      	b.n	8002d0e <HAL_RCC_OscConfig+0x506>
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	0800429c 	.word	0x0800429c
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	20000004 	.word	0x20000004
 8002cec:	42470020 	.word	0x42470020
 8002cf0:	42470680 	.word	0x42470680
 8002cf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe faec 	bl	80012d4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0a3      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0e:	4b54      	ldr	r3, [pc, #336]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ee      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4f0>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fada 	bl	80012d4 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7fe fad6 	bl	80012d4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e08d      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d3a:	4b49      	ldr	r3, [pc, #292]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ee      	bne.n	8002d24 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d46:	7ffb      	ldrb	r3, [r7, #31]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4c:	4b44      	ldr	r3, [pc, #272]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	4a43      	ldr	r2, [pc, #268]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d079      	beq.n	8002e54 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d056      	beq.n	8002e14 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d13b      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e64 <HAL_RCC_OscConfig+0x65c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe faae 	bl	80012d4 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe faaa 	bl	80012d4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e063      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d8e:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9a:	4b31      	ldr	r3, [pc, #196]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	4319      	orrs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	430b      	orrs	r3, r1
 8002db2:	492b      	ldr	r1, [pc, #172]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e64 <HAL_RCC_OscConfig+0x65c>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fa89 	bl	80012d4 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe fa85 	bl	80012d4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e03e      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dd8:	4b21      	ldr	r3, [pc, #132]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x5be>
 8002de4:	e036      	b.n	8002e54 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <HAL_RCC_OscConfig+0x65c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe fa72 	bl	80012d4 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe fa6e 	bl	80012d4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e027      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e06:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5ec>
 8002e12:	e01f      	b.n	8002e54 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e01a      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <HAL_RCC_OscConfig+0x658>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d10d      	bne.n	8002e50 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	42470060 	.word	0x42470060

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e11a      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b8f      	ldr	r3, [pc, #572]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d919      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x34>
 8002e90:	4b8a      	ldr	r3, [pc, #552]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a89      	ldr	r2, [pc, #548]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b87      	ldr	r3, [pc, #540]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 0201 	bic.w	r2, r3, #1
 8002ea4:	4985      	ldr	r1, [pc, #532]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eac:	4b83      	ldr	r3, [pc, #524]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0f9      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eca:	4b7d      	ldr	r3, [pc, #500]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	497a      	ldr	r1, [pc, #488]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 808e 	beq.w	8003006 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef2:	4b73      	ldr	r3, [pc, #460]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d121      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e0d7      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0cb      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f22:	4b67      	ldr	r3, [pc, #412]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0bf      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f32:	4b63      	ldr	r3, [pc, #396]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0b7      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b5f      	ldr	r3, [pc, #380]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	495c      	ldr	r1, [pc, #368]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7fe f9be 	bl	80012d4 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d112      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe f9b6 	bl	80012d4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e09b      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f7a:	4b51      	ldr	r3, [pc, #324]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d1ee      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xfc>
 8002f86:	e03e      	b.n	8003006 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d112      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f92:	f7fe f99f 	bl	80012d4 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e084      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa8:	4b45      	ldr	r3, [pc, #276]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x12a>
 8002fb4:	e027      	b.n	8003006 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d11d      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc0:	f7fe f988 	bl	80012d4 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e06d      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d1ee      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x158>
 8002fe2:	e010      	b.n	8003006 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe4:	f7fe f976 	bl	80012d4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e05b      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ffa:	4b31      	ldr	r3, [pc, #196]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ee      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003006:	4b2d      	ldr	r3, [pc, #180]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d219      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCC_ClockConfig+0x1be>
 800301a:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a27      	ldr	r2, [pc, #156]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b25      	ldr	r3, [pc, #148]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	4923      	ldr	r1, [pc, #140]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e034      	b.n	80030b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4917      	ldr	r1, [pc, #92]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003072:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	490f      	ldr	r1, [pc, #60]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003086:	f000 f823 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 800308a:	4602      	mov	r2, r0
 800308c:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <HAL_RCC_ClockConfig+0x258>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	490b      	ldr	r1, [pc, #44]	@ (80030c4 <HAL_RCC_ClockConfig+0x25c>)
 8003098:	5ccb      	ldrb	r3, [r1, r3]
 800309a:	fa22 f303 	lsr.w	r3, r2, r3
 800309e:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_RCC_ClockConfig+0x260>)
 80030a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <HAL_RCC_ClockConfig+0x264>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe f8c8 	bl	800123c <HAL_InitTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80030b0:	7afb      	ldrb	r3, [r7, #11]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00
 80030c0:	40023800 	.word	0x40023800
 80030c4:	0800429c 	.word	0x0800429c
 80030c8:	20000000 	.word	0x20000000
 80030cc:	20000004 	.word	0x20000004

080030d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b092      	sub	sp, #72	@ 0x48
 80030d6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80030d8:	4b79      	ldr	r3, [pc, #484]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d00d      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x34>
 80030e8:	2b0c      	cmp	r3, #12
 80030ea:	f200 80d5 	bhi.w	8003298 <HAL_RCC_GetSysClockFreq+0x1c8>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x28>
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x2e>
 80030f6:	e0cf      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4b72      	ldr	r3, [pc, #456]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80030fa:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80030fc:	e0da      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030fe:	4b72      	ldr	r3, [pc, #456]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003100:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003102:	e0d7      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003106:	0c9b      	lsrs	r3, r3, #18
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	4b6f      	ldr	r3, [pc, #444]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800310e:	5c9b      	ldrb	r3, [r3, r2]
 8003110:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003114:	0d9b      	lsrs	r3, r3, #22
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	3301      	adds	r3, #1
 800311c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311e:	4b68      	ldr	r3, [pc, #416]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d05d      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800312a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312c:	2200      	movs	r2, #0
 800312e:	4618      	mov	r0, r3
 8003130:	4611      	mov	r1, r2
 8003132:	4604      	mov	r4, r0
 8003134:	460d      	mov	r5, r1
 8003136:	4622      	mov	r2, r4
 8003138:	462b      	mov	r3, r5
 800313a:	f04f 0000 	mov.w	r0, #0
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	0159      	lsls	r1, r3, #5
 8003144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003148:	0150      	lsls	r0, r2, #5
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4621      	mov	r1, r4
 8003150:	1a51      	subs	r1, r2, r1
 8003152:	6139      	str	r1, [r7, #16]
 8003154:	4629      	mov	r1, r5
 8003156:	eb63 0301 	sbc.w	r3, r3, r1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003168:	4659      	mov	r1, fp
 800316a:	018b      	lsls	r3, r1, #6
 800316c:	4651      	mov	r1, sl
 800316e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003172:	4651      	mov	r1, sl
 8003174:	018a      	lsls	r2, r1, #6
 8003176:	46d4      	mov	ip, sl
 8003178:	ebb2 080c 	subs.w	r8, r2, ip
 800317c:	4659      	mov	r1, fp
 800317e:	eb63 0901 	sbc.w	r9, r3, r1
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800318e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003196:	4690      	mov	r8, r2
 8003198:	4699      	mov	r9, r3
 800319a:	4623      	mov	r3, r4
 800319c:	eb18 0303 	adds.w	r3, r8, r3
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	462b      	mov	r3, r5
 80031a4:	eb49 0303 	adc.w	r3, r9, r3
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031b6:	4629      	mov	r1, r5
 80031b8:	024b      	lsls	r3, r1, #9
 80031ba:	4620      	mov	r0, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	4604      	mov	r4, r0
 80031c0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80031c4:	4601      	mov	r1, r0
 80031c6:	024a      	lsls	r2, r1, #9
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ce:	2200      	movs	r2, #0
 80031d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031d8:	f7fd fbea 	bl	80009b0 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031e4:	e055      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e8:	2200      	movs	r2, #0
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80031ee:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031f2:	4642      	mov	r2, r8
 80031f4:	464b      	mov	r3, r9
 80031f6:	f04f 0000 	mov.w	r0, #0
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	0159      	lsls	r1, r3, #5
 8003200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003204:	0150      	lsls	r0, r2, #5
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	46c4      	mov	ip, r8
 800320c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003210:	4640      	mov	r0, r8
 8003212:	4649      	mov	r1, r9
 8003214:	468c      	mov	ip, r1
 8003216:	eb63 0b0c 	sbc.w	fp, r3, ip
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003226:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800322a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800322e:	ebb2 040a 	subs.w	r4, r2, sl
 8003232:	eb63 050b 	sbc.w	r5, r3, fp
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	00eb      	lsls	r3, r5, #3
 8003240:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003244:	00e2      	lsls	r2, r4, #3
 8003246:	4614      	mov	r4, r2
 8003248:	461d      	mov	r5, r3
 800324a:	4603      	mov	r3, r0
 800324c:	18e3      	adds	r3, r4, r3
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	eb45 0303 	adc.w	r3, r5, r3
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003264:	4629      	mov	r1, r5
 8003266:	028b      	lsls	r3, r1, #10
 8003268:	4620      	mov	r0, r4
 800326a:	4629      	mov	r1, r5
 800326c:	4604      	mov	r4, r0
 800326e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003272:	4601      	mov	r1, r0
 8003274:	028a      	lsls	r2, r1, #10
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327c:	2200      	movs	r2, #0
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	61fa      	str	r2, [r7, #28]
 8003282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003286:	f7fd fb93 	bl	80009b0 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4613      	mov	r3, r2
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8003292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003294:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003296:	e00d      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003298:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	0b5b      	lsrs	r3, r3, #13
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	3301      	adds	r3, #1
 80032a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80032b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3748      	adds	r7, #72	@ 0x48
 80032ba:	46bd      	mov	sp, r7
 80032bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	007a1200 	.word	0x007a1200
 80032cc:	08004290 	.word	0x08004290

080032d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d4:	4b02      	ldr	r3, [pc, #8]	@ (80032e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	20000000 	.word	0x20000000

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e8:	f7ff fff2 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4903      	ldr	r1, [pc, #12]	@ (8003308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	080042ac 	.word	0x080042ac

0800330c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003318:	4b29      	ldr	r3, [pc, #164]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d12c      	bne.n	800337e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003324:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003330:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e016      	b.n	800336a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333c:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	4a1f      	ldr	r2, [pc, #124]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003346:	6253      	str	r3, [r2, #36]	@ 0x24
 8003348:	4b1d      	ldr	r3, [pc, #116]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003354:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800335c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800335e:	4b18      	ldr	r3, [pc, #96]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	4a17      	ldr	r2, [pc, #92]	@ (80033c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003368:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003370:	d105      	bne.n	800337e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003378:	d101      	bne.n	800337e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800337a:	2301      	movs	r3, #1
 800337c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003384:	4b10      	ldr	r3, [pc, #64]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0f      	ldr	r2, [pc, #60]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 0201 	bic.w	r2, r3, #1
 8003398:	490b      	ldr	r1, [pc, #44]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033a0:	4b09      	ldr	r3, [pc, #36]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d001      	beq.n	80033b2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40007000 	.word	0x40007000
 80033c8:	40023c00 	.word	0x40023c00

080033cc <std>:
 80033cc:	2300      	movs	r3, #0
 80033ce:	b510      	push	{r4, lr}
 80033d0:	4604      	mov	r4, r0
 80033d2:	e9c0 3300 	strd	r3, r3, [r0]
 80033d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033da:	6083      	str	r3, [r0, #8]
 80033dc:	8181      	strh	r1, [r0, #12]
 80033de:	6643      	str	r3, [r0, #100]	@ 0x64
 80033e0:	81c2      	strh	r2, [r0, #14]
 80033e2:	6183      	str	r3, [r0, #24]
 80033e4:	4619      	mov	r1, r3
 80033e6:	2208      	movs	r2, #8
 80033e8:	305c      	adds	r0, #92	@ 0x5c
 80033ea:	f000 f906 	bl	80035fa <memset>
 80033ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <std+0x58>)
 80033f0:	6224      	str	r4, [r4, #32]
 80033f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80033f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <std+0x5c>)
 80033f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80033f8:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <std+0x60>)
 80033fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <std+0x64>)
 80033fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8003400:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <std+0x68>)
 8003402:	429c      	cmp	r4, r3
 8003404:	d006      	beq.n	8003414 <std+0x48>
 8003406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800340a:	4294      	cmp	r4, r2
 800340c:	d002      	beq.n	8003414 <std+0x48>
 800340e:	33d0      	adds	r3, #208	@ 0xd0
 8003410:	429c      	cmp	r4, r3
 8003412:	d105      	bne.n	8003420 <std+0x54>
 8003414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	f000 b966 	b.w	80036ec <__retarget_lock_init_recursive>
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	08003575 	.word	0x08003575
 8003428:	08003597 	.word	0x08003597
 800342c:	080035cf 	.word	0x080035cf
 8003430:	080035f3 	.word	0x080035f3
 8003434:	200000e8 	.word	0x200000e8

08003438 <stdio_exit_handler>:
 8003438:	4a02      	ldr	r2, [pc, #8]	@ (8003444 <stdio_exit_handler+0xc>)
 800343a:	4903      	ldr	r1, [pc, #12]	@ (8003448 <stdio_exit_handler+0x10>)
 800343c:	4803      	ldr	r0, [pc, #12]	@ (800344c <stdio_exit_handler+0x14>)
 800343e:	f000 b869 	b.w	8003514 <_fwalk_sglue>
 8003442:	bf00      	nop
 8003444:	2000000c 	.word	0x2000000c
 8003448:	08003f85 	.word	0x08003f85
 800344c:	2000001c 	.word	0x2000001c

08003450 <cleanup_stdio>:
 8003450:	6841      	ldr	r1, [r0, #4]
 8003452:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <cleanup_stdio+0x34>)
 8003454:	b510      	push	{r4, lr}
 8003456:	4299      	cmp	r1, r3
 8003458:	4604      	mov	r4, r0
 800345a:	d001      	beq.n	8003460 <cleanup_stdio+0x10>
 800345c:	f000 fd92 	bl	8003f84 <_fflush_r>
 8003460:	68a1      	ldr	r1, [r4, #8]
 8003462:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <cleanup_stdio+0x38>)
 8003464:	4299      	cmp	r1, r3
 8003466:	d002      	beq.n	800346e <cleanup_stdio+0x1e>
 8003468:	4620      	mov	r0, r4
 800346a:	f000 fd8b 	bl	8003f84 <_fflush_r>
 800346e:	68e1      	ldr	r1, [r4, #12]
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <cleanup_stdio+0x3c>)
 8003472:	4299      	cmp	r1, r3
 8003474:	d004      	beq.n	8003480 <cleanup_stdio+0x30>
 8003476:	4620      	mov	r0, r4
 8003478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800347c:	f000 bd82 	b.w	8003f84 <_fflush_r>
 8003480:	bd10      	pop	{r4, pc}
 8003482:	bf00      	nop
 8003484:	200000e8 	.word	0x200000e8
 8003488:	20000150 	.word	0x20000150
 800348c:	200001b8 	.word	0x200001b8

08003490 <global_stdio_init.part.0>:
 8003490:	b510      	push	{r4, lr}
 8003492:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <global_stdio_init.part.0+0x30>)
 8003494:	4c0b      	ldr	r4, [pc, #44]	@ (80034c4 <global_stdio_init.part.0+0x34>)
 8003496:	4a0c      	ldr	r2, [pc, #48]	@ (80034c8 <global_stdio_init.part.0+0x38>)
 8003498:	4620      	mov	r0, r4
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	2104      	movs	r1, #4
 800349e:	2200      	movs	r2, #0
 80034a0:	f7ff ff94 	bl	80033cc <std>
 80034a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034a8:	2201      	movs	r2, #1
 80034aa:	2109      	movs	r1, #9
 80034ac:	f7ff ff8e 	bl	80033cc <std>
 80034b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80034b4:	2202      	movs	r2, #2
 80034b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ba:	2112      	movs	r1, #18
 80034bc:	f7ff bf86 	b.w	80033cc <std>
 80034c0:	20000220 	.word	0x20000220
 80034c4:	200000e8 	.word	0x200000e8
 80034c8:	08003439 	.word	0x08003439

080034cc <__sfp_lock_acquire>:
 80034cc:	4801      	ldr	r0, [pc, #4]	@ (80034d4 <__sfp_lock_acquire+0x8>)
 80034ce:	f000 b90e 	b.w	80036ee <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	20000229 	.word	0x20000229

080034d8 <__sfp_lock_release>:
 80034d8:	4801      	ldr	r0, [pc, #4]	@ (80034e0 <__sfp_lock_release+0x8>)
 80034da:	f000 b909 	b.w	80036f0 <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	20000229 	.word	0x20000229

080034e4 <__sinit>:
 80034e4:	b510      	push	{r4, lr}
 80034e6:	4604      	mov	r4, r0
 80034e8:	f7ff fff0 	bl	80034cc <__sfp_lock_acquire>
 80034ec:	6a23      	ldr	r3, [r4, #32]
 80034ee:	b11b      	cbz	r3, 80034f8 <__sinit+0x14>
 80034f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034f4:	f7ff bff0 	b.w	80034d8 <__sfp_lock_release>
 80034f8:	4b04      	ldr	r3, [pc, #16]	@ (800350c <__sinit+0x28>)
 80034fa:	6223      	str	r3, [r4, #32]
 80034fc:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <__sinit+0x2c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f5      	bne.n	80034f0 <__sinit+0xc>
 8003504:	f7ff ffc4 	bl	8003490 <global_stdio_init.part.0>
 8003508:	e7f2      	b.n	80034f0 <__sinit+0xc>
 800350a:	bf00      	nop
 800350c:	08003451 	.word	0x08003451
 8003510:	20000220 	.word	0x20000220

08003514 <_fwalk_sglue>:
 8003514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003518:	4607      	mov	r7, r0
 800351a:	4688      	mov	r8, r1
 800351c:	4614      	mov	r4, r2
 800351e:	2600      	movs	r6, #0
 8003520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003524:	f1b9 0901 	subs.w	r9, r9, #1
 8003528:	d505      	bpl.n	8003536 <_fwalk_sglue+0x22>
 800352a:	6824      	ldr	r4, [r4, #0]
 800352c:	2c00      	cmp	r4, #0
 800352e:	d1f7      	bne.n	8003520 <_fwalk_sglue+0xc>
 8003530:	4630      	mov	r0, r6
 8003532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003536:	89ab      	ldrh	r3, [r5, #12]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d907      	bls.n	800354c <_fwalk_sglue+0x38>
 800353c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003540:	3301      	adds	r3, #1
 8003542:	d003      	beq.n	800354c <_fwalk_sglue+0x38>
 8003544:	4629      	mov	r1, r5
 8003546:	4638      	mov	r0, r7
 8003548:	47c0      	blx	r8
 800354a:	4306      	orrs	r6, r0
 800354c:	3568      	adds	r5, #104	@ 0x68
 800354e:	e7e9      	b.n	8003524 <_fwalk_sglue+0x10>

08003550 <iprintf>:
 8003550:	b40f      	push	{r0, r1, r2, r3}
 8003552:	b507      	push	{r0, r1, r2, lr}
 8003554:	4906      	ldr	r1, [pc, #24]	@ (8003570 <iprintf+0x20>)
 8003556:	ab04      	add	r3, sp, #16
 8003558:	6808      	ldr	r0, [r1, #0]
 800355a:	f853 2b04 	ldr.w	r2, [r3], #4
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	f000 f9e5 	bl	8003930 <_vfiprintf_r>
 8003566:	b003      	add	sp, #12
 8003568:	f85d eb04 	ldr.w	lr, [sp], #4
 800356c:	b004      	add	sp, #16
 800356e:	4770      	bx	lr
 8003570:	20000018 	.word	0x20000018

08003574 <__sread>:
 8003574:	b510      	push	{r4, lr}
 8003576:	460c      	mov	r4, r1
 8003578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800357c:	f000 f868 	bl	8003650 <_read_r>
 8003580:	2800      	cmp	r0, #0
 8003582:	bfab      	itete	ge
 8003584:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003586:	89a3      	ldrhlt	r3, [r4, #12]
 8003588:	181b      	addge	r3, r3, r0
 800358a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800358e:	bfac      	ite	ge
 8003590:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003592:	81a3      	strhlt	r3, [r4, #12]
 8003594:	bd10      	pop	{r4, pc}

08003596 <__swrite>:
 8003596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359a:	461f      	mov	r7, r3
 800359c:	898b      	ldrh	r3, [r1, #12]
 800359e:	4605      	mov	r5, r0
 80035a0:	05db      	lsls	r3, r3, #23
 80035a2:	460c      	mov	r4, r1
 80035a4:	4616      	mov	r6, r2
 80035a6:	d505      	bpl.n	80035b4 <__swrite+0x1e>
 80035a8:	2302      	movs	r3, #2
 80035aa:	2200      	movs	r2, #0
 80035ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b0:	f000 f83c 	bl	800362c <_lseek_r>
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	4632      	mov	r2, r6
 80035b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035bc:	81a3      	strh	r3, [r4, #12]
 80035be:	4628      	mov	r0, r5
 80035c0:	463b      	mov	r3, r7
 80035c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ca:	f000 b853 	b.w	8003674 <_write_r>

080035ce <__sseek>:
 80035ce:	b510      	push	{r4, lr}
 80035d0:	460c      	mov	r4, r1
 80035d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d6:	f000 f829 	bl	800362c <_lseek_r>
 80035da:	1c43      	adds	r3, r0, #1
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	bf15      	itete	ne
 80035e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80035e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80035e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80035ea:	81a3      	strheq	r3, [r4, #12]
 80035ec:	bf18      	it	ne
 80035ee:	81a3      	strhne	r3, [r4, #12]
 80035f0:	bd10      	pop	{r4, pc}

080035f2 <__sclose>:
 80035f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f6:	f000 b809 	b.w	800360c <_close_r>

080035fa <memset>:
 80035fa:	4603      	mov	r3, r0
 80035fc:	4402      	add	r2, r0
 80035fe:	4293      	cmp	r3, r2
 8003600:	d100      	bne.n	8003604 <memset+0xa>
 8003602:	4770      	bx	lr
 8003604:	f803 1b01 	strb.w	r1, [r3], #1
 8003608:	e7f9      	b.n	80035fe <memset+0x4>
	...

0800360c <_close_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	2300      	movs	r3, #0
 8003610:	4d05      	ldr	r5, [pc, #20]	@ (8003628 <_close_r+0x1c>)
 8003612:	4604      	mov	r4, r0
 8003614:	4608      	mov	r0, r1
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	f7fd fd65 	bl	80010e6 <_close>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_close_r+0x1a>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b103      	cbz	r3, 8003626 <_close_r+0x1a>
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	20000224 	.word	0x20000224

0800362c <_lseek_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4604      	mov	r4, r0
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	2200      	movs	r2, #0
 8003636:	4d05      	ldr	r5, [pc, #20]	@ (800364c <_lseek_r+0x20>)
 8003638:	602a      	str	r2, [r5, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	f7fd fd77 	bl	800112e <_lseek>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d102      	bne.n	800364a <_lseek_r+0x1e>
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	b103      	cbz	r3, 800364a <_lseek_r+0x1e>
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	bd38      	pop	{r3, r4, r5, pc}
 800364c:	20000224 	.word	0x20000224

08003650 <_read_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4604      	mov	r4, r0
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	2200      	movs	r2, #0
 800365a:	4d05      	ldr	r5, [pc, #20]	@ (8003670 <_read_r+0x20>)
 800365c:	602a      	str	r2, [r5, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	f7fd fd08 	bl	8001074 <_read>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d102      	bne.n	800366e <_read_r+0x1e>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	b103      	cbz	r3, 800366e <_read_r+0x1e>
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	20000224 	.word	0x20000224

08003674 <_write_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4604      	mov	r4, r0
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	2200      	movs	r2, #0
 800367e:	4d05      	ldr	r5, [pc, #20]	@ (8003694 <_write_r+0x20>)
 8003680:	602a      	str	r2, [r5, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	f7fd fd13 	bl	80010ae <_write>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d102      	bne.n	8003692 <_write_r+0x1e>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	b103      	cbz	r3, 8003692 <_write_r+0x1e>
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	20000224 	.word	0x20000224

08003698 <__errno>:
 8003698:	4b01      	ldr	r3, [pc, #4]	@ (80036a0 <__errno+0x8>)
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000018 	.word	0x20000018

080036a4 <__libc_init_array>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	2600      	movs	r6, #0
 80036a8:	4d0c      	ldr	r5, [pc, #48]	@ (80036dc <__libc_init_array+0x38>)
 80036aa:	4c0d      	ldr	r4, [pc, #52]	@ (80036e0 <__libc_init_array+0x3c>)
 80036ac:	1b64      	subs	r4, r4, r5
 80036ae:	10a4      	asrs	r4, r4, #2
 80036b0:	42a6      	cmp	r6, r4
 80036b2:	d109      	bne.n	80036c8 <__libc_init_array+0x24>
 80036b4:	f000 fdc4 	bl	8004240 <_init>
 80036b8:	2600      	movs	r6, #0
 80036ba:	4d0a      	ldr	r5, [pc, #40]	@ (80036e4 <__libc_init_array+0x40>)
 80036bc:	4c0a      	ldr	r4, [pc, #40]	@ (80036e8 <__libc_init_array+0x44>)
 80036be:	1b64      	subs	r4, r4, r5
 80036c0:	10a4      	asrs	r4, r4, #2
 80036c2:	42a6      	cmp	r6, r4
 80036c4:	d105      	bne.n	80036d2 <__libc_init_array+0x2e>
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036cc:	4798      	blx	r3
 80036ce:	3601      	adds	r6, #1
 80036d0:	e7ee      	b.n	80036b0 <__libc_init_array+0xc>
 80036d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d6:	4798      	blx	r3
 80036d8:	3601      	adds	r6, #1
 80036da:	e7f2      	b.n	80036c2 <__libc_init_array+0x1e>
 80036dc:	080042f0 	.word	0x080042f0
 80036e0:	080042f0 	.word	0x080042f0
 80036e4:	080042f0 	.word	0x080042f0
 80036e8:	080042f4 	.word	0x080042f4

080036ec <__retarget_lock_init_recursive>:
 80036ec:	4770      	bx	lr

080036ee <__retarget_lock_acquire_recursive>:
 80036ee:	4770      	bx	lr

080036f0 <__retarget_lock_release_recursive>:
 80036f0:	4770      	bx	lr
	...

080036f4 <_free_r>:
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4605      	mov	r5, r0
 80036f8:	2900      	cmp	r1, #0
 80036fa:	d040      	beq.n	800377e <_free_r+0x8a>
 80036fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003700:	1f0c      	subs	r4, r1, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	bfb8      	it	lt
 8003706:	18e4      	addlt	r4, r4, r3
 8003708:	f000 f8de 	bl	80038c8 <__malloc_lock>
 800370c:	4a1c      	ldr	r2, [pc, #112]	@ (8003780 <_free_r+0x8c>)
 800370e:	6813      	ldr	r3, [r2, #0]
 8003710:	b933      	cbnz	r3, 8003720 <_free_r+0x2c>
 8003712:	6063      	str	r3, [r4, #4]
 8003714:	6014      	str	r4, [r2, #0]
 8003716:	4628      	mov	r0, r5
 8003718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800371c:	f000 b8da 	b.w	80038d4 <__malloc_unlock>
 8003720:	42a3      	cmp	r3, r4
 8003722:	d908      	bls.n	8003736 <_free_r+0x42>
 8003724:	6820      	ldr	r0, [r4, #0]
 8003726:	1821      	adds	r1, r4, r0
 8003728:	428b      	cmp	r3, r1
 800372a:	bf01      	itttt	eq
 800372c:	6819      	ldreq	r1, [r3, #0]
 800372e:	685b      	ldreq	r3, [r3, #4]
 8003730:	1809      	addeq	r1, r1, r0
 8003732:	6021      	streq	r1, [r4, #0]
 8003734:	e7ed      	b.n	8003712 <_free_r+0x1e>
 8003736:	461a      	mov	r2, r3
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	b10b      	cbz	r3, 8003740 <_free_r+0x4c>
 800373c:	42a3      	cmp	r3, r4
 800373e:	d9fa      	bls.n	8003736 <_free_r+0x42>
 8003740:	6811      	ldr	r1, [r2, #0]
 8003742:	1850      	adds	r0, r2, r1
 8003744:	42a0      	cmp	r0, r4
 8003746:	d10b      	bne.n	8003760 <_free_r+0x6c>
 8003748:	6820      	ldr	r0, [r4, #0]
 800374a:	4401      	add	r1, r0
 800374c:	1850      	adds	r0, r2, r1
 800374e:	4283      	cmp	r3, r0
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	d1e0      	bne.n	8003716 <_free_r+0x22>
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4408      	add	r0, r1
 800375a:	6010      	str	r0, [r2, #0]
 800375c:	6053      	str	r3, [r2, #4]
 800375e:	e7da      	b.n	8003716 <_free_r+0x22>
 8003760:	d902      	bls.n	8003768 <_free_r+0x74>
 8003762:	230c      	movs	r3, #12
 8003764:	602b      	str	r3, [r5, #0]
 8003766:	e7d6      	b.n	8003716 <_free_r+0x22>
 8003768:	6820      	ldr	r0, [r4, #0]
 800376a:	1821      	adds	r1, r4, r0
 800376c:	428b      	cmp	r3, r1
 800376e:	bf01      	itttt	eq
 8003770:	6819      	ldreq	r1, [r3, #0]
 8003772:	685b      	ldreq	r3, [r3, #4]
 8003774:	1809      	addeq	r1, r1, r0
 8003776:	6021      	streq	r1, [r4, #0]
 8003778:	6063      	str	r3, [r4, #4]
 800377a:	6054      	str	r4, [r2, #4]
 800377c:	e7cb      	b.n	8003716 <_free_r+0x22>
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	20000230 	.word	0x20000230

08003784 <sbrk_aligned>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	4e0f      	ldr	r6, [pc, #60]	@ (80037c4 <sbrk_aligned+0x40>)
 8003788:	460c      	mov	r4, r1
 800378a:	6831      	ldr	r1, [r6, #0]
 800378c:	4605      	mov	r5, r0
 800378e:	b911      	cbnz	r1, 8003796 <sbrk_aligned+0x12>
 8003790:	f000 fcb4 	bl	80040fc <_sbrk_r>
 8003794:	6030      	str	r0, [r6, #0]
 8003796:	4621      	mov	r1, r4
 8003798:	4628      	mov	r0, r5
 800379a:	f000 fcaf 	bl	80040fc <_sbrk_r>
 800379e:	1c43      	adds	r3, r0, #1
 80037a0:	d103      	bne.n	80037aa <sbrk_aligned+0x26>
 80037a2:	f04f 34ff 	mov.w	r4, #4294967295
 80037a6:	4620      	mov	r0, r4
 80037a8:	bd70      	pop	{r4, r5, r6, pc}
 80037aa:	1cc4      	adds	r4, r0, #3
 80037ac:	f024 0403 	bic.w	r4, r4, #3
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d0f8      	beq.n	80037a6 <sbrk_aligned+0x22>
 80037b4:	1a21      	subs	r1, r4, r0
 80037b6:	4628      	mov	r0, r5
 80037b8:	f000 fca0 	bl	80040fc <_sbrk_r>
 80037bc:	3001      	adds	r0, #1
 80037be:	d1f2      	bne.n	80037a6 <sbrk_aligned+0x22>
 80037c0:	e7ef      	b.n	80037a2 <sbrk_aligned+0x1e>
 80037c2:	bf00      	nop
 80037c4:	2000022c 	.word	0x2000022c

080037c8 <_malloc_r>:
 80037c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037cc:	1ccd      	adds	r5, r1, #3
 80037ce:	f025 0503 	bic.w	r5, r5, #3
 80037d2:	3508      	adds	r5, #8
 80037d4:	2d0c      	cmp	r5, #12
 80037d6:	bf38      	it	cc
 80037d8:	250c      	movcc	r5, #12
 80037da:	2d00      	cmp	r5, #0
 80037dc:	4606      	mov	r6, r0
 80037de:	db01      	blt.n	80037e4 <_malloc_r+0x1c>
 80037e0:	42a9      	cmp	r1, r5
 80037e2:	d904      	bls.n	80037ee <_malloc_r+0x26>
 80037e4:	230c      	movs	r3, #12
 80037e6:	6033      	str	r3, [r6, #0]
 80037e8:	2000      	movs	r0, #0
 80037ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038c4 <_malloc_r+0xfc>
 80037f2:	f000 f869 	bl	80038c8 <__malloc_lock>
 80037f6:	f8d8 3000 	ldr.w	r3, [r8]
 80037fa:	461c      	mov	r4, r3
 80037fc:	bb44      	cbnz	r4, 8003850 <_malloc_r+0x88>
 80037fe:	4629      	mov	r1, r5
 8003800:	4630      	mov	r0, r6
 8003802:	f7ff ffbf 	bl	8003784 <sbrk_aligned>
 8003806:	1c43      	adds	r3, r0, #1
 8003808:	4604      	mov	r4, r0
 800380a:	d158      	bne.n	80038be <_malloc_r+0xf6>
 800380c:	f8d8 4000 	ldr.w	r4, [r8]
 8003810:	4627      	mov	r7, r4
 8003812:	2f00      	cmp	r7, #0
 8003814:	d143      	bne.n	800389e <_malloc_r+0xd6>
 8003816:	2c00      	cmp	r4, #0
 8003818:	d04b      	beq.n	80038b2 <_malloc_r+0xea>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	4639      	mov	r1, r7
 800381e:	4630      	mov	r0, r6
 8003820:	eb04 0903 	add.w	r9, r4, r3
 8003824:	f000 fc6a 	bl	80040fc <_sbrk_r>
 8003828:	4581      	cmp	r9, r0
 800382a:	d142      	bne.n	80038b2 <_malloc_r+0xea>
 800382c:	6821      	ldr	r1, [r4, #0]
 800382e:	4630      	mov	r0, r6
 8003830:	1a6d      	subs	r5, r5, r1
 8003832:	4629      	mov	r1, r5
 8003834:	f7ff ffa6 	bl	8003784 <sbrk_aligned>
 8003838:	3001      	adds	r0, #1
 800383a:	d03a      	beq.n	80038b2 <_malloc_r+0xea>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	442b      	add	r3, r5
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	f8d8 3000 	ldr.w	r3, [r8]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	bb62      	cbnz	r2, 80038a4 <_malloc_r+0xdc>
 800384a:	f8c8 7000 	str.w	r7, [r8]
 800384e:	e00f      	b.n	8003870 <_malloc_r+0xa8>
 8003850:	6822      	ldr	r2, [r4, #0]
 8003852:	1b52      	subs	r2, r2, r5
 8003854:	d420      	bmi.n	8003898 <_malloc_r+0xd0>
 8003856:	2a0b      	cmp	r2, #11
 8003858:	d917      	bls.n	800388a <_malloc_r+0xc2>
 800385a:	1961      	adds	r1, r4, r5
 800385c:	42a3      	cmp	r3, r4
 800385e:	6025      	str	r5, [r4, #0]
 8003860:	bf18      	it	ne
 8003862:	6059      	strne	r1, [r3, #4]
 8003864:	6863      	ldr	r3, [r4, #4]
 8003866:	bf08      	it	eq
 8003868:	f8c8 1000 	streq.w	r1, [r8]
 800386c:	5162      	str	r2, [r4, r5]
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	4630      	mov	r0, r6
 8003872:	f000 f82f 	bl	80038d4 <__malloc_unlock>
 8003876:	f104 000b 	add.w	r0, r4, #11
 800387a:	1d23      	adds	r3, r4, #4
 800387c:	f020 0007 	bic.w	r0, r0, #7
 8003880:	1ac2      	subs	r2, r0, r3
 8003882:	bf1c      	itt	ne
 8003884:	1a1b      	subne	r3, r3, r0
 8003886:	50a3      	strne	r3, [r4, r2]
 8003888:	e7af      	b.n	80037ea <_malloc_r+0x22>
 800388a:	6862      	ldr	r2, [r4, #4]
 800388c:	42a3      	cmp	r3, r4
 800388e:	bf0c      	ite	eq
 8003890:	f8c8 2000 	streq.w	r2, [r8]
 8003894:	605a      	strne	r2, [r3, #4]
 8003896:	e7eb      	b.n	8003870 <_malloc_r+0xa8>
 8003898:	4623      	mov	r3, r4
 800389a:	6864      	ldr	r4, [r4, #4]
 800389c:	e7ae      	b.n	80037fc <_malloc_r+0x34>
 800389e:	463c      	mov	r4, r7
 80038a0:	687f      	ldr	r7, [r7, #4]
 80038a2:	e7b6      	b.n	8003812 <_malloc_r+0x4a>
 80038a4:	461a      	mov	r2, r3
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	42a3      	cmp	r3, r4
 80038aa:	d1fb      	bne.n	80038a4 <_malloc_r+0xdc>
 80038ac:	2300      	movs	r3, #0
 80038ae:	6053      	str	r3, [r2, #4]
 80038b0:	e7de      	b.n	8003870 <_malloc_r+0xa8>
 80038b2:	230c      	movs	r3, #12
 80038b4:	4630      	mov	r0, r6
 80038b6:	6033      	str	r3, [r6, #0]
 80038b8:	f000 f80c 	bl	80038d4 <__malloc_unlock>
 80038bc:	e794      	b.n	80037e8 <_malloc_r+0x20>
 80038be:	6005      	str	r5, [r0, #0]
 80038c0:	e7d6      	b.n	8003870 <_malloc_r+0xa8>
 80038c2:	bf00      	nop
 80038c4:	20000230 	.word	0x20000230

080038c8 <__malloc_lock>:
 80038c8:	4801      	ldr	r0, [pc, #4]	@ (80038d0 <__malloc_lock+0x8>)
 80038ca:	f7ff bf10 	b.w	80036ee <__retarget_lock_acquire_recursive>
 80038ce:	bf00      	nop
 80038d0:	20000228 	.word	0x20000228

080038d4 <__malloc_unlock>:
 80038d4:	4801      	ldr	r0, [pc, #4]	@ (80038dc <__malloc_unlock+0x8>)
 80038d6:	f7ff bf0b 	b.w	80036f0 <__retarget_lock_release_recursive>
 80038da:	bf00      	nop
 80038dc:	20000228 	.word	0x20000228

080038e0 <__sfputc_r>:
 80038e0:	6893      	ldr	r3, [r2, #8]
 80038e2:	b410      	push	{r4}
 80038e4:	3b01      	subs	r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	6093      	str	r3, [r2, #8]
 80038ea:	da07      	bge.n	80038fc <__sfputc_r+0x1c>
 80038ec:	6994      	ldr	r4, [r2, #24]
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	db01      	blt.n	80038f6 <__sfputc_r+0x16>
 80038f2:	290a      	cmp	r1, #10
 80038f4:	d102      	bne.n	80038fc <__sfputc_r+0x1c>
 80038f6:	bc10      	pop	{r4}
 80038f8:	f000 bb6c 	b.w	8003fd4 <__swbuf_r>
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	1c58      	adds	r0, r3, #1
 8003900:	6010      	str	r0, [r2, #0]
 8003902:	7019      	strb	r1, [r3, #0]
 8003904:	4608      	mov	r0, r1
 8003906:	bc10      	pop	{r4}
 8003908:	4770      	bx	lr

0800390a <__sfputs_r>:
 800390a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390c:	4606      	mov	r6, r0
 800390e:	460f      	mov	r7, r1
 8003910:	4614      	mov	r4, r2
 8003912:	18d5      	adds	r5, r2, r3
 8003914:	42ac      	cmp	r4, r5
 8003916:	d101      	bne.n	800391c <__sfputs_r+0x12>
 8003918:	2000      	movs	r0, #0
 800391a:	e007      	b.n	800392c <__sfputs_r+0x22>
 800391c:	463a      	mov	r2, r7
 800391e:	4630      	mov	r0, r6
 8003920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003924:	f7ff ffdc 	bl	80038e0 <__sfputc_r>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d1f3      	bne.n	8003914 <__sfputs_r+0xa>
 800392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003930 <_vfiprintf_r>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	460d      	mov	r5, r1
 8003936:	4614      	mov	r4, r2
 8003938:	4698      	mov	r8, r3
 800393a:	4606      	mov	r6, r0
 800393c:	b09d      	sub	sp, #116	@ 0x74
 800393e:	b118      	cbz	r0, 8003948 <_vfiprintf_r+0x18>
 8003940:	6a03      	ldr	r3, [r0, #32]
 8003942:	b90b      	cbnz	r3, 8003948 <_vfiprintf_r+0x18>
 8003944:	f7ff fdce 	bl	80034e4 <__sinit>
 8003948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800394a:	07d9      	lsls	r1, r3, #31
 800394c:	d405      	bmi.n	800395a <_vfiprintf_r+0x2a>
 800394e:	89ab      	ldrh	r3, [r5, #12]
 8003950:	059a      	lsls	r2, r3, #22
 8003952:	d402      	bmi.n	800395a <_vfiprintf_r+0x2a>
 8003954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003956:	f7ff feca 	bl	80036ee <__retarget_lock_acquire_recursive>
 800395a:	89ab      	ldrh	r3, [r5, #12]
 800395c:	071b      	lsls	r3, r3, #28
 800395e:	d501      	bpl.n	8003964 <_vfiprintf_r+0x34>
 8003960:	692b      	ldr	r3, [r5, #16]
 8003962:	b99b      	cbnz	r3, 800398c <_vfiprintf_r+0x5c>
 8003964:	4629      	mov	r1, r5
 8003966:	4630      	mov	r0, r6
 8003968:	f000 fb72 	bl	8004050 <__swsetup_r>
 800396c:	b170      	cbz	r0, 800398c <_vfiprintf_r+0x5c>
 800396e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003970:	07dc      	lsls	r4, r3, #31
 8003972:	d504      	bpl.n	800397e <_vfiprintf_r+0x4e>
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	b01d      	add	sp, #116	@ 0x74
 800397a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397e:	89ab      	ldrh	r3, [r5, #12]
 8003980:	0598      	lsls	r0, r3, #22
 8003982:	d4f7      	bmi.n	8003974 <_vfiprintf_r+0x44>
 8003984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003986:	f7ff feb3 	bl	80036f0 <__retarget_lock_release_recursive>
 800398a:	e7f3      	b.n	8003974 <_vfiprintf_r+0x44>
 800398c:	2300      	movs	r3, #0
 800398e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003990:	2320      	movs	r3, #32
 8003992:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003996:	2330      	movs	r3, #48	@ 0x30
 8003998:	f04f 0901 	mov.w	r9, #1
 800399c:	f8cd 800c 	str.w	r8, [sp, #12]
 80039a0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003b4c <_vfiprintf_r+0x21c>
 80039a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039a8:	4623      	mov	r3, r4
 80039aa:	469a      	mov	sl, r3
 80039ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039b0:	b10a      	cbz	r2, 80039b6 <_vfiprintf_r+0x86>
 80039b2:	2a25      	cmp	r2, #37	@ 0x25
 80039b4:	d1f9      	bne.n	80039aa <_vfiprintf_r+0x7a>
 80039b6:	ebba 0b04 	subs.w	fp, sl, r4
 80039ba:	d00b      	beq.n	80039d4 <_vfiprintf_r+0xa4>
 80039bc:	465b      	mov	r3, fp
 80039be:	4622      	mov	r2, r4
 80039c0:	4629      	mov	r1, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	f7ff ffa1 	bl	800390a <__sfputs_r>
 80039c8:	3001      	adds	r0, #1
 80039ca:	f000 80a7 	beq.w	8003b1c <_vfiprintf_r+0x1ec>
 80039ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039d0:	445a      	add	r2, fp
 80039d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80039d4:	f89a 3000 	ldrb.w	r3, [sl]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 809f 	beq.w	8003b1c <_vfiprintf_r+0x1ec>
 80039de:	2300      	movs	r3, #0
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039e8:	f10a 0a01 	add.w	sl, sl, #1
 80039ec:	9304      	str	r3, [sp, #16]
 80039ee:	9307      	str	r3, [sp, #28]
 80039f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80039f6:	4654      	mov	r4, sl
 80039f8:	2205      	movs	r2, #5
 80039fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039fe:	4853      	ldr	r0, [pc, #332]	@ (8003b4c <_vfiprintf_r+0x21c>)
 8003a00:	f000 fb8c 	bl	800411c <memchr>
 8003a04:	9a04      	ldr	r2, [sp, #16]
 8003a06:	b9d8      	cbnz	r0, 8003a40 <_vfiprintf_r+0x110>
 8003a08:	06d1      	lsls	r1, r2, #27
 8003a0a:	bf44      	itt	mi
 8003a0c:	2320      	movmi	r3, #32
 8003a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a12:	0713      	lsls	r3, r2, #28
 8003a14:	bf44      	itt	mi
 8003a16:	232b      	movmi	r3, #43	@ 0x2b
 8003a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a20:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a22:	d015      	beq.n	8003a50 <_vfiprintf_r+0x120>
 8003a24:	4654      	mov	r4, sl
 8003a26:	2000      	movs	r0, #0
 8003a28:	f04f 0c0a 	mov.w	ip, #10
 8003a2c:	9a07      	ldr	r2, [sp, #28]
 8003a2e:	4621      	mov	r1, r4
 8003a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a34:	3b30      	subs	r3, #48	@ 0x30
 8003a36:	2b09      	cmp	r3, #9
 8003a38:	d94b      	bls.n	8003ad2 <_vfiprintf_r+0x1a2>
 8003a3a:	b1b0      	cbz	r0, 8003a6a <_vfiprintf_r+0x13a>
 8003a3c:	9207      	str	r2, [sp, #28]
 8003a3e:	e014      	b.n	8003a6a <_vfiprintf_r+0x13a>
 8003a40:	eba0 0308 	sub.w	r3, r0, r8
 8003a44:	fa09 f303 	lsl.w	r3, r9, r3
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	46a2      	mov	sl, r4
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	e7d2      	b.n	80039f6 <_vfiprintf_r+0xc6>
 8003a50:	9b03      	ldr	r3, [sp, #12]
 8003a52:	1d19      	adds	r1, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	9103      	str	r1, [sp, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bfbb      	ittet	lt
 8003a5c:	425b      	neglt	r3, r3
 8003a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a62:	9307      	strge	r3, [sp, #28]
 8003a64:	9307      	strlt	r3, [sp, #28]
 8003a66:	bfb8      	it	lt
 8003a68:	9204      	strlt	r2, [sp, #16]
 8003a6a:	7823      	ldrb	r3, [r4, #0]
 8003a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a6e:	d10a      	bne.n	8003a86 <_vfiprintf_r+0x156>
 8003a70:	7863      	ldrb	r3, [r4, #1]
 8003a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a74:	d132      	bne.n	8003adc <_vfiprintf_r+0x1ac>
 8003a76:	9b03      	ldr	r3, [sp, #12]
 8003a78:	3402      	adds	r4, #2
 8003a7a:	1d1a      	adds	r2, r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	9203      	str	r2, [sp, #12]
 8003a80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a84:	9305      	str	r3, [sp, #20]
 8003a86:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003b50 <_vfiprintf_r+0x220>
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	4650      	mov	r0, sl
 8003a8e:	7821      	ldrb	r1, [r4, #0]
 8003a90:	f000 fb44 	bl	800411c <memchr>
 8003a94:	b138      	cbz	r0, 8003aa6 <_vfiprintf_r+0x176>
 8003a96:	2240      	movs	r2, #64	@ 0x40
 8003a98:	9b04      	ldr	r3, [sp, #16]
 8003a9a:	eba0 000a 	sub.w	r0, r0, sl
 8003a9e:	4082      	lsls	r2, r0
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	3401      	adds	r4, #1
 8003aa4:	9304      	str	r3, [sp, #16]
 8003aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aaa:	2206      	movs	r2, #6
 8003aac:	4829      	ldr	r0, [pc, #164]	@ (8003b54 <_vfiprintf_r+0x224>)
 8003aae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ab2:	f000 fb33 	bl	800411c <memchr>
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d03f      	beq.n	8003b3a <_vfiprintf_r+0x20a>
 8003aba:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <_vfiprintf_r+0x228>)
 8003abc:	bb1b      	cbnz	r3, 8003b06 <_vfiprintf_r+0x1d6>
 8003abe:	9b03      	ldr	r3, [sp, #12]
 8003ac0:	3307      	adds	r3, #7
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	9303      	str	r3, [sp, #12]
 8003aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003acc:	443b      	add	r3, r7
 8003ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ad0:	e76a      	b.n	80039a8 <_vfiprintf_r+0x78>
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ada:	e7a8      	b.n	8003a2e <_vfiprintf_r+0xfe>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f04f 0c0a 	mov.w	ip, #10
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	3401      	adds	r4, #1
 8003ae6:	9305      	str	r3, [sp, #20]
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aee:	3a30      	subs	r2, #48	@ 0x30
 8003af0:	2a09      	cmp	r2, #9
 8003af2:	d903      	bls.n	8003afc <_vfiprintf_r+0x1cc>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0c6      	beq.n	8003a86 <_vfiprintf_r+0x156>
 8003af8:	9105      	str	r1, [sp, #20]
 8003afa:	e7c4      	b.n	8003a86 <_vfiprintf_r+0x156>
 8003afc:	4604      	mov	r4, r0
 8003afe:	2301      	movs	r3, #1
 8003b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b04:	e7f0      	b.n	8003ae8 <_vfiprintf_r+0x1b8>
 8003b06:	ab03      	add	r3, sp, #12
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	4b13      	ldr	r3, [pc, #76]	@ (8003b5c <_vfiprintf_r+0x22c>)
 8003b10:	a904      	add	r1, sp, #16
 8003b12:	f3af 8000 	nop.w
 8003b16:	4607      	mov	r7, r0
 8003b18:	1c78      	adds	r0, r7, #1
 8003b1a:	d1d6      	bne.n	8003aca <_vfiprintf_r+0x19a>
 8003b1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b1e:	07d9      	lsls	r1, r3, #31
 8003b20:	d405      	bmi.n	8003b2e <_vfiprintf_r+0x1fe>
 8003b22:	89ab      	ldrh	r3, [r5, #12]
 8003b24:	059a      	lsls	r2, r3, #22
 8003b26:	d402      	bmi.n	8003b2e <_vfiprintf_r+0x1fe>
 8003b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b2a:	f7ff fde1 	bl	80036f0 <__retarget_lock_release_recursive>
 8003b2e:	89ab      	ldrh	r3, [r5, #12]
 8003b30:	065b      	lsls	r3, r3, #25
 8003b32:	f53f af1f 	bmi.w	8003974 <_vfiprintf_r+0x44>
 8003b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b38:	e71e      	b.n	8003978 <_vfiprintf_r+0x48>
 8003b3a:	ab03      	add	r3, sp, #12
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	462a      	mov	r2, r5
 8003b40:	4630      	mov	r0, r6
 8003b42:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <_vfiprintf_r+0x22c>)
 8003b44:	a904      	add	r1, sp, #16
 8003b46:	f000 f87d 	bl	8003c44 <_printf_i>
 8003b4a:	e7e4      	b.n	8003b16 <_vfiprintf_r+0x1e6>
 8003b4c:	080042b4 	.word	0x080042b4
 8003b50:	080042ba 	.word	0x080042ba
 8003b54:	080042be 	.word	0x080042be
 8003b58:	00000000 	.word	0x00000000
 8003b5c:	0800390b 	.word	0x0800390b

08003b60 <_printf_common>:
 8003b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b64:	4616      	mov	r6, r2
 8003b66:	4698      	mov	r8, r3
 8003b68:	688a      	ldr	r2, [r1, #8]
 8003b6a:	690b      	ldr	r3, [r1, #16]
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	bfb8      	it	lt
 8003b72:	4613      	movlt	r3, r2
 8003b74:	6033      	str	r3, [r6, #0]
 8003b76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b80:	b10a      	cbz	r2, 8003b86 <_printf_common+0x26>
 8003b82:	3301      	adds	r3, #1
 8003b84:	6033      	str	r3, [r6, #0]
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	0699      	lsls	r1, r3, #26
 8003b8a:	bf42      	ittt	mi
 8003b8c:	6833      	ldrmi	r3, [r6, #0]
 8003b8e:	3302      	addmi	r3, #2
 8003b90:	6033      	strmi	r3, [r6, #0]
 8003b92:	6825      	ldr	r5, [r4, #0]
 8003b94:	f015 0506 	ands.w	r5, r5, #6
 8003b98:	d106      	bne.n	8003ba8 <_printf_common+0x48>
 8003b9a:	f104 0a19 	add.w	sl, r4, #25
 8003b9e:	68e3      	ldr	r3, [r4, #12]
 8003ba0:	6832      	ldr	r2, [r6, #0]
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	42ab      	cmp	r3, r5
 8003ba6:	dc2b      	bgt.n	8003c00 <_printf_common+0xa0>
 8003ba8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bac:	6822      	ldr	r2, [r4, #0]
 8003bae:	3b00      	subs	r3, #0
 8003bb0:	bf18      	it	ne
 8003bb2:	2301      	movne	r3, #1
 8003bb4:	0692      	lsls	r2, r2, #26
 8003bb6:	d430      	bmi.n	8003c1a <_printf_common+0xba>
 8003bb8:	4641      	mov	r1, r8
 8003bba:	4638      	mov	r0, r7
 8003bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bc0:	47c8      	blx	r9
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	d023      	beq.n	8003c0e <_printf_common+0xae>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	6922      	ldr	r2, [r4, #16]
 8003bca:	f003 0306 	and.w	r3, r3, #6
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	bf14      	ite	ne
 8003bd2:	2500      	movne	r5, #0
 8003bd4:	6833      	ldreq	r3, [r6, #0]
 8003bd6:	f04f 0600 	mov.w	r6, #0
 8003bda:	bf08      	it	eq
 8003bdc:	68e5      	ldreq	r5, [r4, #12]
 8003bde:	f104 041a 	add.w	r4, r4, #26
 8003be2:	bf08      	it	eq
 8003be4:	1aed      	subeq	r5, r5, r3
 8003be6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bea:	bf08      	it	eq
 8003bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bfc4      	itt	gt
 8003bf4:	1a9b      	subgt	r3, r3, r2
 8003bf6:	18ed      	addgt	r5, r5, r3
 8003bf8:	42b5      	cmp	r5, r6
 8003bfa:	d11a      	bne.n	8003c32 <_printf_common+0xd2>
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	e008      	b.n	8003c12 <_printf_common+0xb2>
 8003c00:	2301      	movs	r3, #1
 8003c02:	4652      	mov	r2, sl
 8003c04:	4641      	mov	r1, r8
 8003c06:	4638      	mov	r0, r7
 8003c08:	47c8      	blx	r9
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d103      	bne.n	8003c16 <_printf_common+0xb6>
 8003c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c16:	3501      	adds	r5, #1
 8003c18:	e7c1      	b.n	8003b9e <_printf_common+0x3e>
 8003c1a:	2030      	movs	r0, #48	@ 0x30
 8003c1c:	18e1      	adds	r1, r4, r3
 8003c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c28:	4422      	add	r2, r4
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c30:	e7c2      	b.n	8003bb8 <_printf_common+0x58>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4622      	mov	r2, r4
 8003c36:	4641      	mov	r1, r8
 8003c38:	4638      	mov	r0, r7
 8003c3a:	47c8      	blx	r9
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d0e6      	beq.n	8003c0e <_printf_common+0xae>
 8003c40:	3601      	adds	r6, #1
 8003c42:	e7d9      	b.n	8003bf8 <_printf_common+0x98>

08003c44 <_printf_i>:
 8003c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	7e0f      	ldrb	r7, [r1, #24]
 8003c4a:	4691      	mov	r9, r2
 8003c4c:	2f78      	cmp	r7, #120	@ 0x78
 8003c4e:	4680      	mov	r8, r0
 8003c50:	460c      	mov	r4, r1
 8003c52:	469a      	mov	sl, r3
 8003c54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c5a:	d807      	bhi.n	8003c6c <_printf_i+0x28>
 8003c5c:	2f62      	cmp	r7, #98	@ 0x62
 8003c5e:	d80a      	bhi.n	8003c76 <_printf_i+0x32>
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	f000 80d3 	beq.w	8003e0c <_printf_i+0x1c8>
 8003c66:	2f58      	cmp	r7, #88	@ 0x58
 8003c68:	f000 80ba 	beq.w	8003de0 <_printf_i+0x19c>
 8003c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c74:	e03a      	b.n	8003cec <_printf_i+0xa8>
 8003c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c7a:	2b15      	cmp	r3, #21
 8003c7c:	d8f6      	bhi.n	8003c6c <_printf_i+0x28>
 8003c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c84 <_printf_i+0x40>)
 8003c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cf1 	.word	0x08003cf1
 8003c8c:	08003c6d 	.word	0x08003c6d
 8003c90:	08003c6d 	.word	0x08003c6d
 8003c94:	08003c6d 	.word	0x08003c6d
 8003c98:	08003c6d 	.word	0x08003c6d
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003c6d 	.word	0x08003c6d
 8003ca4:	08003c6d 	.word	0x08003c6d
 8003ca8:	08003c6d 	.word	0x08003c6d
 8003cac:	08003c6d 	.word	0x08003c6d
 8003cb0:	08003df3 	.word	0x08003df3
 8003cb4:	08003d1b 	.word	0x08003d1b
 8003cb8:	08003dad 	.word	0x08003dad
 8003cbc:	08003c6d 	.word	0x08003c6d
 8003cc0:	08003c6d 	.word	0x08003c6d
 8003cc4:	08003e15 	.word	0x08003e15
 8003cc8:	08003c6d 	.word	0x08003c6d
 8003ccc:	08003d1b 	.word	0x08003d1b
 8003cd0:	08003c6d 	.word	0x08003c6d
 8003cd4:	08003c6d 	.word	0x08003c6d
 8003cd8:	08003db5 	.word	0x08003db5
 8003cdc:	6833      	ldr	r3, [r6, #0]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6032      	str	r2, [r6, #0]
 8003ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cec:	2301      	movs	r3, #1
 8003cee:	e09e      	b.n	8003e2e <_printf_i+0x1ea>
 8003cf0:	6833      	ldr	r3, [r6, #0]
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	1d19      	adds	r1, r3, #4
 8003cf6:	6031      	str	r1, [r6, #0]
 8003cf8:	0606      	lsls	r6, r0, #24
 8003cfa:	d501      	bpl.n	8003d00 <_printf_i+0xbc>
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	e003      	b.n	8003d08 <_printf_i+0xc4>
 8003d00:	0645      	lsls	r5, r0, #25
 8003d02:	d5fb      	bpl.n	8003cfc <_printf_i+0xb8>
 8003d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d08:	2d00      	cmp	r5, #0
 8003d0a:	da03      	bge.n	8003d14 <_printf_i+0xd0>
 8003d0c:	232d      	movs	r3, #45	@ 0x2d
 8003d0e:	426d      	negs	r5, r5
 8003d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d14:	230a      	movs	r3, #10
 8003d16:	4859      	ldr	r0, [pc, #356]	@ (8003e7c <_printf_i+0x238>)
 8003d18:	e011      	b.n	8003d3e <_printf_i+0xfa>
 8003d1a:	6821      	ldr	r1, [r4, #0]
 8003d1c:	6833      	ldr	r3, [r6, #0]
 8003d1e:	0608      	lsls	r0, r1, #24
 8003d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d24:	d402      	bmi.n	8003d2c <_printf_i+0xe8>
 8003d26:	0649      	lsls	r1, r1, #25
 8003d28:	bf48      	it	mi
 8003d2a:	b2ad      	uxthmi	r5, r5
 8003d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	bf14      	ite	ne
 8003d32:	230a      	movne	r3, #10
 8003d34:	2308      	moveq	r3, #8
 8003d36:	4851      	ldr	r0, [pc, #324]	@ (8003e7c <_printf_i+0x238>)
 8003d38:	2100      	movs	r1, #0
 8003d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d3e:	6866      	ldr	r6, [r4, #4]
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	bfa8      	it	ge
 8003d44:	6821      	ldrge	r1, [r4, #0]
 8003d46:	60a6      	str	r6, [r4, #8]
 8003d48:	bfa4      	itt	ge
 8003d4a:	f021 0104 	bicge.w	r1, r1, #4
 8003d4e:	6021      	strge	r1, [r4, #0]
 8003d50:	b90d      	cbnz	r5, 8003d56 <_printf_i+0x112>
 8003d52:	2e00      	cmp	r6, #0
 8003d54:	d04b      	beq.n	8003dee <_printf_i+0x1aa>
 8003d56:	4616      	mov	r6, r2
 8003d58:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d5c:	fb03 5711 	mls	r7, r3, r1, r5
 8003d60:	5dc7      	ldrb	r7, [r0, r7]
 8003d62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d66:	462f      	mov	r7, r5
 8003d68:	42bb      	cmp	r3, r7
 8003d6a:	460d      	mov	r5, r1
 8003d6c:	d9f4      	bls.n	8003d58 <_printf_i+0x114>
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d10b      	bne.n	8003d8a <_printf_i+0x146>
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	07df      	lsls	r7, r3, #31
 8003d76:	d508      	bpl.n	8003d8a <_printf_i+0x146>
 8003d78:	6923      	ldr	r3, [r4, #16]
 8003d7a:	6861      	ldr	r1, [r4, #4]
 8003d7c:	4299      	cmp	r1, r3
 8003d7e:	bfde      	ittt	le
 8003d80:	2330      	movle	r3, #48	@ 0x30
 8003d82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d8a:	1b92      	subs	r2, r2, r6
 8003d8c:	6122      	str	r2, [r4, #16]
 8003d8e:	464b      	mov	r3, r9
 8003d90:	4621      	mov	r1, r4
 8003d92:	4640      	mov	r0, r8
 8003d94:	f8cd a000 	str.w	sl, [sp]
 8003d98:	aa03      	add	r2, sp, #12
 8003d9a:	f7ff fee1 	bl	8003b60 <_printf_common>
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d14a      	bne.n	8003e38 <_printf_i+0x1f4>
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295
 8003da6:	b004      	add	sp, #16
 8003da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	f043 0320 	orr.w	r3, r3, #32
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	2778      	movs	r7, #120	@ 0x78
 8003db6:	4832      	ldr	r0, [pc, #200]	@ (8003e80 <_printf_i+0x23c>)
 8003db8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	6831      	ldr	r1, [r6, #0]
 8003dc0:	061f      	lsls	r7, r3, #24
 8003dc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dc6:	d402      	bmi.n	8003dce <_printf_i+0x18a>
 8003dc8:	065f      	lsls	r7, r3, #25
 8003dca:	bf48      	it	mi
 8003dcc:	b2ad      	uxthmi	r5, r5
 8003dce:	6031      	str	r1, [r6, #0]
 8003dd0:	07d9      	lsls	r1, r3, #31
 8003dd2:	bf44      	itt	mi
 8003dd4:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd8:	6023      	strmi	r3, [r4, #0]
 8003dda:	b11d      	cbz	r5, 8003de4 <_printf_i+0x1a0>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	e7ab      	b.n	8003d38 <_printf_i+0xf4>
 8003de0:	4826      	ldr	r0, [pc, #152]	@ (8003e7c <_printf_i+0x238>)
 8003de2:	e7e9      	b.n	8003db8 <_printf_i+0x174>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f023 0320 	bic.w	r3, r3, #32
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	e7f6      	b.n	8003ddc <_printf_i+0x198>
 8003dee:	4616      	mov	r6, r2
 8003df0:	e7bd      	b.n	8003d6e <_printf_i+0x12a>
 8003df2:	6833      	ldr	r3, [r6, #0]
 8003df4:	6825      	ldr	r5, [r4, #0]
 8003df6:	1d18      	adds	r0, r3, #4
 8003df8:	6961      	ldr	r1, [r4, #20]
 8003dfa:	6030      	str	r0, [r6, #0]
 8003dfc:	062e      	lsls	r6, r5, #24
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	d501      	bpl.n	8003e06 <_printf_i+0x1c2>
 8003e02:	6019      	str	r1, [r3, #0]
 8003e04:	e002      	b.n	8003e0c <_printf_i+0x1c8>
 8003e06:	0668      	lsls	r0, r5, #25
 8003e08:	d5fb      	bpl.n	8003e02 <_printf_i+0x1be>
 8003e0a:	8019      	strh	r1, [r3, #0]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4616      	mov	r6, r2
 8003e10:	6123      	str	r3, [r4, #16]
 8003e12:	e7bc      	b.n	8003d8e <_printf_i+0x14a>
 8003e14:	6833      	ldr	r3, [r6, #0]
 8003e16:	2100      	movs	r1, #0
 8003e18:	1d1a      	adds	r2, r3, #4
 8003e1a:	6032      	str	r2, [r6, #0]
 8003e1c:	681e      	ldr	r6, [r3, #0]
 8003e1e:	6862      	ldr	r2, [r4, #4]
 8003e20:	4630      	mov	r0, r6
 8003e22:	f000 f97b 	bl	800411c <memchr>
 8003e26:	b108      	cbz	r0, 8003e2c <_printf_i+0x1e8>
 8003e28:	1b80      	subs	r0, r0, r6
 8003e2a:	6060      	str	r0, [r4, #4]
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	6123      	str	r3, [r4, #16]
 8003e30:	2300      	movs	r3, #0
 8003e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e36:	e7aa      	b.n	8003d8e <_printf_i+0x14a>
 8003e38:	4632      	mov	r2, r6
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	47d0      	blx	sl
 8003e42:	3001      	adds	r0, #1
 8003e44:	d0ad      	beq.n	8003da2 <_printf_i+0x15e>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	079b      	lsls	r3, r3, #30
 8003e4a:	d413      	bmi.n	8003e74 <_printf_i+0x230>
 8003e4c:	68e0      	ldr	r0, [r4, #12]
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	4298      	cmp	r0, r3
 8003e52:	bfb8      	it	lt
 8003e54:	4618      	movlt	r0, r3
 8003e56:	e7a6      	b.n	8003da6 <_printf_i+0x162>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	4632      	mov	r2, r6
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	4640      	mov	r0, r8
 8003e60:	47d0      	blx	sl
 8003e62:	3001      	adds	r0, #1
 8003e64:	d09d      	beq.n	8003da2 <_printf_i+0x15e>
 8003e66:	3501      	adds	r5, #1
 8003e68:	68e3      	ldr	r3, [r4, #12]
 8003e6a:	9903      	ldr	r1, [sp, #12]
 8003e6c:	1a5b      	subs	r3, r3, r1
 8003e6e:	42ab      	cmp	r3, r5
 8003e70:	dcf2      	bgt.n	8003e58 <_printf_i+0x214>
 8003e72:	e7eb      	b.n	8003e4c <_printf_i+0x208>
 8003e74:	2500      	movs	r5, #0
 8003e76:	f104 0619 	add.w	r6, r4, #25
 8003e7a:	e7f5      	b.n	8003e68 <_printf_i+0x224>
 8003e7c:	080042c5 	.word	0x080042c5
 8003e80:	080042d6 	.word	0x080042d6

08003e84 <__sflush_r>:
 8003e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	0716      	lsls	r6, r2, #28
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	d454      	bmi.n	8003f3c <__sflush_r+0xb8>
 8003e92:	684b      	ldr	r3, [r1, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dc02      	bgt.n	8003e9e <__sflush_r+0x1a>
 8003e98:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dd48      	ble.n	8003f30 <__sflush_r+0xac>
 8003e9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ea0:	2e00      	cmp	r6, #0
 8003ea2:	d045      	beq.n	8003f30 <__sflush_r+0xac>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003eaa:	682f      	ldr	r7, [r5, #0]
 8003eac:	6a21      	ldr	r1, [r4, #32]
 8003eae:	602b      	str	r3, [r5, #0]
 8003eb0:	d030      	beq.n	8003f14 <__sflush_r+0x90>
 8003eb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	0759      	lsls	r1, r3, #29
 8003eb8:	d505      	bpl.n	8003ec6 <__sflush_r+0x42>
 8003eba:	6863      	ldr	r3, [r4, #4]
 8003ebc:	1ad2      	subs	r2, r2, r3
 8003ebe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ec0:	b10b      	cbz	r3, 8003ec6 <__sflush_r+0x42>
 8003ec2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ec4:	1ad2      	subs	r2, r2, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	4628      	mov	r0, r5
 8003eca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ecc:	6a21      	ldr	r1, [r4, #32]
 8003ece:	47b0      	blx	r6
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	d106      	bne.n	8003ee4 <__sflush_r+0x60>
 8003ed6:	6829      	ldr	r1, [r5, #0]
 8003ed8:	291d      	cmp	r1, #29
 8003eda:	d82b      	bhi.n	8003f34 <__sflush_r+0xb0>
 8003edc:	4a28      	ldr	r2, [pc, #160]	@ (8003f80 <__sflush_r+0xfc>)
 8003ede:	410a      	asrs	r2, r1
 8003ee0:	07d6      	lsls	r6, r2, #31
 8003ee2:	d427      	bmi.n	8003f34 <__sflush_r+0xb0>
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	6062      	str	r2, [r4, #4]
 8003ee8:	6922      	ldr	r2, [r4, #16]
 8003eea:	04d9      	lsls	r1, r3, #19
 8003eec:	6022      	str	r2, [r4, #0]
 8003eee:	d504      	bpl.n	8003efa <__sflush_r+0x76>
 8003ef0:	1c42      	adds	r2, r0, #1
 8003ef2:	d101      	bne.n	8003ef8 <__sflush_r+0x74>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b903      	cbnz	r3, 8003efa <__sflush_r+0x76>
 8003ef8:	6560      	str	r0, [r4, #84]	@ 0x54
 8003efa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003efc:	602f      	str	r7, [r5, #0]
 8003efe:	b1b9      	cbz	r1, 8003f30 <__sflush_r+0xac>
 8003f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <__sflush_r+0x8a>
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f7ff fbf3 	bl	80036f4 <_free_r>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f12:	e00d      	b.n	8003f30 <__sflush_r+0xac>
 8003f14:	2301      	movs	r3, #1
 8003f16:	4628      	mov	r0, r5
 8003f18:	47b0      	blx	r6
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	1c50      	adds	r0, r2, #1
 8003f1e:	d1c9      	bne.n	8003eb4 <__sflush_r+0x30>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0c6      	beq.n	8003eb4 <__sflush_r+0x30>
 8003f26:	2b1d      	cmp	r3, #29
 8003f28:	d001      	beq.n	8003f2e <__sflush_r+0xaa>
 8003f2a:	2b16      	cmp	r3, #22
 8003f2c:	d11d      	bne.n	8003f6a <__sflush_r+0xe6>
 8003f2e:	602f      	str	r7, [r5, #0]
 8003f30:	2000      	movs	r0, #0
 8003f32:	e021      	b.n	8003f78 <__sflush_r+0xf4>
 8003f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f38:	b21b      	sxth	r3, r3
 8003f3a:	e01a      	b.n	8003f72 <__sflush_r+0xee>
 8003f3c:	690f      	ldr	r7, [r1, #16]
 8003f3e:	2f00      	cmp	r7, #0
 8003f40:	d0f6      	beq.n	8003f30 <__sflush_r+0xac>
 8003f42:	0793      	lsls	r3, r2, #30
 8003f44:	bf18      	it	ne
 8003f46:	2300      	movne	r3, #0
 8003f48:	680e      	ldr	r6, [r1, #0]
 8003f4a:	bf08      	it	eq
 8003f4c:	694b      	ldreq	r3, [r1, #20]
 8003f4e:	1bf6      	subs	r6, r6, r7
 8003f50:	600f      	str	r7, [r1, #0]
 8003f52:	608b      	str	r3, [r1, #8]
 8003f54:	2e00      	cmp	r6, #0
 8003f56:	ddeb      	ble.n	8003f30 <__sflush_r+0xac>
 8003f58:	4633      	mov	r3, r6
 8003f5a:	463a      	mov	r2, r7
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	6a21      	ldr	r1, [r4, #32]
 8003f60:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003f64:	47e0      	blx	ip
 8003f66:	2800      	cmp	r0, #0
 8003f68:	dc07      	bgt.n	8003f7a <__sflush_r+0xf6>
 8003f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f72:	f04f 30ff 	mov.w	r0, #4294967295
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f7a:	4407      	add	r7, r0
 8003f7c:	1a36      	subs	r6, r6, r0
 8003f7e:	e7e9      	b.n	8003f54 <__sflush_r+0xd0>
 8003f80:	dfbffffe 	.word	0xdfbffffe

08003f84 <_fflush_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	690b      	ldr	r3, [r1, #16]
 8003f88:	4605      	mov	r5, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	b913      	cbnz	r3, 8003f94 <_fflush_r+0x10>
 8003f8e:	2500      	movs	r5, #0
 8003f90:	4628      	mov	r0, r5
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	b118      	cbz	r0, 8003f9e <_fflush_r+0x1a>
 8003f96:	6a03      	ldr	r3, [r0, #32]
 8003f98:	b90b      	cbnz	r3, 8003f9e <_fflush_r+0x1a>
 8003f9a:	f7ff faa3 	bl	80034e4 <__sinit>
 8003f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f3      	beq.n	8003f8e <_fflush_r+0xa>
 8003fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003fa8:	07d0      	lsls	r0, r2, #31
 8003faa:	d404      	bmi.n	8003fb6 <_fflush_r+0x32>
 8003fac:	0599      	lsls	r1, r3, #22
 8003fae:	d402      	bmi.n	8003fb6 <_fflush_r+0x32>
 8003fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fb2:	f7ff fb9c 	bl	80036ee <__retarget_lock_acquire_recursive>
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	4621      	mov	r1, r4
 8003fba:	f7ff ff63 	bl	8003e84 <__sflush_r>
 8003fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	07da      	lsls	r2, r3, #31
 8003fc4:	d4e4      	bmi.n	8003f90 <_fflush_r+0xc>
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	059b      	lsls	r3, r3, #22
 8003fca:	d4e1      	bmi.n	8003f90 <_fflush_r+0xc>
 8003fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fce:	f7ff fb8f 	bl	80036f0 <__retarget_lock_release_recursive>
 8003fd2:	e7dd      	b.n	8003f90 <_fflush_r+0xc>

08003fd4 <__swbuf_r>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	460e      	mov	r6, r1
 8003fd8:	4614      	mov	r4, r2
 8003fda:	4605      	mov	r5, r0
 8003fdc:	b118      	cbz	r0, 8003fe6 <__swbuf_r+0x12>
 8003fde:	6a03      	ldr	r3, [r0, #32]
 8003fe0:	b90b      	cbnz	r3, 8003fe6 <__swbuf_r+0x12>
 8003fe2:	f7ff fa7f 	bl	80034e4 <__sinit>
 8003fe6:	69a3      	ldr	r3, [r4, #24]
 8003fe8:	60a3      	str	r3, [r4, #8]
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	071a      	lsls	r2, r3, #28
 8003fee:	d501      	bpl.n	8003ff4 <__swbuf_r+0x20>
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	b943      	cbnz	r3, 8004006 <__swbuf_r+0x32>
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f000 f82a 	bl	8004050 <__swsetup_r>
 8003ffc:	b118      	cbz	r0, 8004006 <__swbuf_r+0x32>
 8003ffe:	f04f 37ff 	mov.w	r7, #4294967295
 8004002:	4638      	mov	r0, r7
 8004004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	6922      	ldr	r2, [r4, #16]
 800400a:	b2f6      	uxtb	r6, r6
 800400c:	1a98      	subs	r0, r3, r2
 800400e:	6963      	ldr	r3, [r4, #20]
 8004010:	4637      	mov	r7, r6
 8004012:	4283      	cmp	r3, r0
 8004014:	dc05      	bgt.n	8004022 <__swbuf_r+0x4e>
 8004016:	4621      	mov	r1, r4
 8004018:	4628      	mov	r0, r5
 800401a:	f7ff ffb3 	bl	8003f84 <_fflush_r>
 800401e:	2800      	cmp	r0, #0
 8004020:	d1ed      	bne.n	8003ffe <__swbuf_r+0x2a>
 8004022:	68a3      	ldr	r3, [r4, #8]
 8004024:	3b01      	subs	r3, #1
 8004026:	60a3      	str	r3, [r4, #8]
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	6022      	str	r2, [r4, #0]
 800402e:	701e      	strb	r6, [r3, #0]
 8004030:	6962      	ldr	r2, [r4, #20]
 8004032:	1c43      	adds	r3, r0, #1
 8004034:	429a      	cmp	r2, r3
 8004036:	d004      	beq.n	8004042 <__swbuf_r+0x6e>
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	07db      	lsls	r3, r3, #31
 800403c:	d5e1      	bpl.n	8004002 <__swbuf_r+0x2e>
 800403e:	2e0a      	cmp	r6, #10
 8004040:	d1df      	bne.n	8004002 <__swbuf_r+0x2e>
 8004042:	4621      	mov	r1, r4
 8004044:	4628      	mov	r0, r5
 8004046:	f7ff ff9d 	bl	8003f84 <_fflush_r>
 800404a:	2800      	cmp	r0, #0
 800404c:	d0d9      	beq.n	8004002 <__swbuf_r+0x2e>
 800404e:	e7d6      	b.n	8003ffe <__swbuf_r+0x2a>

08004050 <__swsetup_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4b29      	ldr	r3, [pc, #164]	@ (80040f8 <__swsetup_r+0xa8>)
 8004054:	4605      	mov	r5, r0
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	460c      	mov	r4, r1
 800405a:	b118      	cbz	r0, 8004064 <__swsetup_r+0x14>
 800405c:	6a03      	ldr	r3, [r0, #32]
 800405e:	b90b      	cbnz	r3, 8004064 <__swsetup_r+0x14>
 8004060:	f7ff fa40 	bl	80034e4 <__sinit>
 8004064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004068:	0719      	lsls	r1, r3, #28
 800406a:	d422      	bmi.n	80040b2 <__swsetup_r+0x62>
 800406c:	06da      	lsls	r2, r3, #27
 800406e:	d407      	bmi.n	8004080 <__swsetup_r+0x30>
 8004070:	2209      	movs	r2, #9
 8004072:	602a      	str	r2, [r5, #0]
 8004074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	81a3      	strh	r3, [r4, #12]
 800407e:	e033      	b.n	80040e8 <__swsetup_r+0x98>
 8004080:	0758      	lsls	r0, r3, #29
 8004082:	d512      	bpl.n	80040aa <__swsetup_r+0x5a>
 8004084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004086:	b141      	cbz	r1, 800409a <__swsetup_r+0x4a>
 8004088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800408c:	4299      	cmp	r1, r3
 800408e:	d002      	beq.n	8004096 <__swsetup_r+0x46>
 8004090:	4628      	mov	r0, r5
 8004092:	f7ff fb2f 	bl	80036f4 <_free_r>
 8004096:	2300      	movs	r3, #0
 8004098:	6363      	str	r3, [r4, #52]	@ 0x34
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80040a0:	81a3      	strh	r3, [r4, #12]
 80040a2:	2300      	movs	r3, #0
 80040a4:	6063      	str	r3, [r4, #4]
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	89a3      	ldrh	r3, [r4, #12]
 80040ac:	f043 0308 	orr.w	r3, r3, #8
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	6923      	ldr	r3, [r4, #16]
 80040b4:	b94b      	cbnz	r3, 80040ca <__swsetup_r+0x7a>
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c0:	d003      	beq.n	80040ca <__swsetup_r+0x7a>
 80040c2:	4621      	mov	r1, r4
 80040c4:	4628      	mov	r0, r5
 80040c6:	f000 f85c 	bl	8004182 <__smakebuf_r>
 80040ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ce:	f013 0201 	ands.w	r2, r3, #1
 80040d2:	d00a      	beq.n	80040ea <__swsetup_r+0x9a>
 80040d4:	2200      	movs	r2, #0
 80040d6:	60a2      	str	r2, [r4, #8]
 80040d8:	6962      	ldr	r2, [r4, #20]
 80040da:	4252      	negs	r2, r2
 80040dc:	61a2      	str	r2, [r4, #24]
 80040de:	6922      	ldr	r2, [r4, #16]
 80040e0:	b942      	cbnz	r2, 80040f4 <__swsetup_r+0xa4>
 80040e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80040e6:	d1c5      	bne.n	8004074 <__swsetup_r+0x24>
 80040e8:	bd38      	pop	{r3, r4, r5, pc}
 80040ea:	0799      	lsls	r1, r3, #30
 80040ec:	bf58      	it	pl
 80040ee:	6962      	ldrpl	r2, [r4, #20]
 80040f0:	60a2      	str	r2, [r4, #8]
 80040f2:	e7f4      	b.n	80040de <__swsetup_r+0x8e>
 80040f4:	2000      	movs	r0, #0
 80040f6:	e7f7      	b.n	80040e8 <__swsetup_r+0x98>
 80040f8:	20000018 	.word	0x20000018

080040fc <_sbrk_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	2300      	movs	r3, #0
 8004100:	4d05      	ldr	r5, [pc, #20]	@ (8004118 <_sbrk_r+0x1c>)
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fd f81e 	bl	8001148 <_sbrk>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_sbrk_r+0x1a>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_sbrk_r+0x1a>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20000224 	.word	0x20000224

0800411c <memchr>:
 800411c:	4603      	mov	r3, r0
 800411e:	b510      	push	{r4, lr}
 8004120:	b2c9      	uxtb	r1, r1
 8004122:	4402      	add	r2, r0
 8004124:	4293      	cmp	r3, r2
 8004126:	4618      	mov	r0, r3
 8004128:	d101      	bne.n	800412e <memchr+0x12>
 800412a:	2000      	movs	r0, #0
 800412c:	e003      	b.n	8004136 <memchr+0x1a>
 800412e:	7804      	ldrb	r4, [r0, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	428c      	cmp	r4, r1
 8004134:	d1f6      	bne.n	8004124 <memchr+0x8>
 8004136:	bd10      	pop	{r4, pc}

08004138 <__swhatbuf_r>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	460c      	mov	r4, r1
 800413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004140:	4615      	mov	r5, r2
 8004142:	2900      	cmp	r1, #0
 8004144:	461e      	mov	r6, r3
 8004146:	b096      	sub	sp, #88	@ 0x58
 8004148:	da0c      	bge.n	8004164 <__swhatbuf_r+0x2c>
 800414a:	89a3      	ldrh	r3, [r4, #12]
 800414c:	2100      	movs	r1, #0
 800414e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004152:	bf14      	ite	ne
 8004154:	2340      	movne	r3, #64	@ 0x40
 8004156:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800415a:	2000      	movs	r0, #0
 800415c:	6031      	str	r1, [r6, #0]
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	b016      	add	sp, #88	@ 0x58
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	466a      	mov	r2, sp
 8004166:	f000 f849 	bl	80041fc <_fstat_r>
 800416a:	2800      	cmp	r0, #0
 800416c:	dbed      	blt.n	800414a <__swhatbuf_r+0x12>
 800416e:	9901      	ldr	r1, [sp, #4]
 8004170:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004174:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004178:	4259      	negs	r1, r3
 800417a:	4159      	adcs	r1, r3
 800417c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004180:	e7eb      	b.n	800415a <__swhatbuf_r+0x22>

08004182 <__smakebuf_r>:
 8004182:	898b      	ldrh	r3, [r1, #12]
 8004184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004186:	079d      	lsls	r5, r3, #30
 8004188:	4606      	mov	r6, r0
 800418a:	460c      	mov	r4, r1
 800418c:	d507      	bpl.n	800419e <__smakebuf_r+0x1c>
 800418e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	6123      	str	r3, [r4, #16]
 8004196:	2301      	movs	r3, #1
 8004198:	6163      	str	r3, [r4, #20]
 800419a:	b003      	add	sp, #12
 800419c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419e:	466a      	mov	r2, sp
 80041a0:	ab01      	add	r3, sp, #4
 80041a2:	f7ff ffc9 	bl	8004138 <__swhatbuf_r>
 80041a6:	9f00      	ldr	r7, [sp, #0]
 80041a8:	4605      	mov	r5, r0
 80041aa:	4639      	mov	r1, r7
 80041ac:	4630      	mov	r0, r6
 80041ae:	f7ff fb0b 	bl	80037c8 <_malloc_r>
 80041b2:	b948      	cbnz	r0, 80041c8 <__smakebuf_r+0x46>
 80041b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041b8:	059a      	lsls	r2, r3, #22
 80041ba:	d4ee      	bmi.n	800419a <__smakebuf_r+0x18>
 80041bc:	f023 0303 	bic.w	r3, r3, #3
 80041c0:	f043 0302 	orr.w	r3, r3, #2
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	e7e2      	b.n	800418e <__smakebuf_r+0xc>
 80041c8:	89a3      	ldrh	r3, [r4, #12]
 80041ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80041ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d2:	81a3      	strh	r3, [r4, #12]
 80041d4:	9b01      	ldr	r3, [sp, #4]
 80041d6:	6020      	str	r0, [r4, #0]
 80041d8:	b15b      	cbz	r3, 80041f2 <__smakebuf_r+0x70>
 80041da:	4630      	mov	r0, r6
 80041dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041e0:	f000 f81e 	bl	8004220 <_isatty_r>
 80041e4:	b128      	cbz	r0, 80041f2 <__smakebuf_r+0x70>
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f023 0303 	bic.w	r3, r3, #3
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	431d      	orrs	r5, r3
 80041f6:	81a5      	strh	r5, [r4, #12]
 80041f8:	e7cf      	b.n	800419a <__smakebuf_r+0x18>
	...

080041fc <_fstat_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	2300      	movs	r3, #0
 8004200:	4d06      	ldr	r5, [pc, #24]	@ (800421c <_fstat_r+0x20>)
 8004202:	4604      	mov	r4, r0
 8004204:	4608      	mov	r0, r1
 8004206:	4611      	mov	r1, r2
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	f7fc ff77 	bl	80010fc <_fstat>
 800420e:	1c43      	adds	r3, r0, #1
 8004210:	d102      	bne.n	8004218 <_fstat_r+0x1c>
 8004212:	682b      	ldr	r3, [r5, #0]
 8004214:	b103      	cbz	r3, 8004218 <_fstat_r+0x1c>
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	bd38      	pop	{r3, r4, r5, pc}
 800421a:	bf00      	nop
 800421c:	20000224 	.word	0x20000224

08004220 <_isatty_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	2300      	movs	r3, #0
 8004224:	4d05      	ldr	r5, [pc, #20]	@ (800423c <_isatty_r+0x1c>)
 8004226:	4604      	mov	r4, r0
 8004228:	4608      	mov	r0, r1
 800422a:	602b      	str	r3, [r5, #0]
 800422c:	f7fc ff75 	bl	800111a <_isatty>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d102      	bne.n	800423a <_isatty_r+0x1a>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	b103      	cbz	r3, 800423a <_isatty_r+0x1a>
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	20000224 	.word	0x20000224

08004240 <_init>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr

0800424c <_fini>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr
